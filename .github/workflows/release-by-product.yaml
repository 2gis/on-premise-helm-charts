---
name: Release Charts by Product

on:
  push:
    tags:
      - '*-PRO'
      - '*-Platform'
      - '*-Citylens'
      - '*-Evergis'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CHART_RELEASER_OWNER: ${{ github.repository_owner }}
  CHART_RELEASER_REPO: ${{ github.event.repository.name }}
  CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Determine product and version
        id: product
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=$(echo $TAG | sed -E 's/-[A-Za-z]+$//')
          PRODUCT=$(echo $TAG | grep -o '[A-Za-z]*$')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "product=$PRODUCT" >> $GITHUB_OUTPUT

      - name: Filter charts by product
        id: filter
        run: |
          # Создаем временную директорию для отфильтрованных чартов
          mkdir -p ./release-charts
          
          case "${{ steps.product.outputs.product }}" in
            "PRO")
              # Находим и копируем только PRO чарты
              for chart in charts/pro-*; do
                if [ -d "$chart" ]; then
                  chart_name=$(basename "$chart")
                  mkdir -p "./release-charts/$chart_name"
                  cp -r "$chart"/* "./release-charts/$chart_name/"
                  echo "Подготовлен чарт: $chart_name"
                fi
              done
              ;;
            "Platform")
              # Находим и копируем только чарты платформы (исключая PRO, Citylens и Evergis)
              for chart in charts/*; do
                if [ -d "$chart" ]; then
                  chart_name=$(basename "$chart")
                  if [[ ! "$chart_name" =~ ^(pro-|citylens-|evergis-) ]]; then
                    mkdir -p "./release-charts/$chart_name"
                    cp -r "$chart"/* "./release-charts/$chart_name/"
                    echo "Подготовлен чарт: $chart_name"
                  fi
                fi
              done
              ;;
            "Citylens")
              # Находим и копируем только Citylens чарты
              for chart in charts/citylens-*; do
                if [ -d "$chart" ]; then
                  chart_name=$(basename "$chart")
                  mkdir -p "./release-charts/$chart_name"
                  cp -r "$chart"/* "./release-charts/$chart_name/"
                  echo "Подготовлен чарт: $chart_name"
                fi
              done
              ;;
            "Evergis")
              # Находим и копируем только Evergis чарты
              for chart in charts/evergis-*; do
                if [ -d "$chart" ]; then
                  chart_name=$(basename "$chart")
                  mkdir -p "./release-charts/$chart_name"
                  cp -r "$chart"/* "./release-charts/$chart_name/"
                  echo "Подготовлен чарт: $chart_name"
                fi
              done
              ;;
          esac
          
          # Выводим список подготовленных чартов для диагностики
          echo "Список подготовленных чартов для релиза:"
          ls -la ./release-charts

      - name: Release chart
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: ./release-charts
          version: ${{ steps.product.outputs.version }}
