name: Release Charts

on:
  push:
    tags:
      - 'PRO-*'
      - 'Platform-*'
      - 'Citylens-*'
      - 'Evergis-*'
      - 'Core-*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CHART_RELEASER_OWNER: ${{ github.repository_owner }}
  CHART_RELEASER_REPO: ${{ github.event.repository.name }}
  CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Filter charts
        run: |
          # Извлечение тега из GITHUB_REF (например, refs/tags/PRO-1.2.3)
          TAG=${GITHUB_REF#refs/tags/}
          echo "Processing tag: $TAG"

          # Извлечение версии и группы
          GROUP=$(echo "$TAG" | grep -oE '^(PRO|Platform|Citylens|Evergis|Core)')
          VERSION=$(echo "$TAG" | sed -E 's/^(PRO|Platform|Citylens|Evergis|Core)-//')

          # Проверка формата версии на соответствие семантическому версионированию
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "Error: Invalid version format. Expected semantic version (x.y.z), got $VERSION"
            exit 1
          fi

          echo "Version: $VERSION"
          echo "Group: $GROUP"

          # Определение чартов для сборки
          CHARTS_DIR="charts"
          TEMP_DIR="charts_temp"
          ALL_CHARTS=$(ls -1 "$CHARTS_DIR")

          # Списки чартов по группам
          PRO_CHARTS=("pro-api" "pro-ui")
          CITYLENS_CHARTS=("citylens" "citylens-routes-ui")
          EVERGIS_CHARTS=("gis-platform")
          CORE_CHARTS=("keys" "license" "keycloak")

          # Универсальная зависимость
          UNIVERSAL_DEPENDENCY="generic-chart"

          # Формирование списка чартов для сборки
          case "$GROUP" in
            "PRO")
              SELECTED_CHARTS=("${PRO_CHARTS[@]}")
              ;;
            "Citylens")
              SELECTED_CHARTS=("${CITYLENS_CHARTS[@]}")
              ;;
            "Evergis")
              SELECTED_CHARTS=("${EVERGIS_CHARTS[@]}")
              ;;
            "Core")
              SELECTED_CHARTS=("${CORE_CHARTS[@]}")
              ;;
            "Platform")
              # Все чарты, кроме PRO, Citylens, Evergis, Core
              SELECTED_CHARTS=()
              for chart in $ALL_CHARTS; do
                if [[ ! " ${PRO_CHARTS[*]} " =~ " $chart " ]] && \
                   [[ ! " ${CITYLENS_CHARTS[*]} " =~ " $chart " ]] && \
                   [[ ! " ${CORE_CHARTS[*]} " =~ " $chart " ]] && \
                   [[ ! " ${EVERGIS_CHARTS[*]} " =~ " $chart " ]]; then
                  SELECTED_CHARTS+=("$chart")
                fi
              done
              ;;
            *)
              echo "Error: Unknown group $GROUP"
              exit 1
              ;;
          esac

          echo "Selected charts: ${SELECTED_CHARTS[*]}"
          echo "Universal dependency: $UNIVERSAL_DEPENDENCY"

          # Создание временной папки для ненужных чартов
          mkdir -p "$TEMP_DIR"

          # Перемещение ненужных чартов (оставляем выбранные и универсальную зависимость)
          for chart in $ALL_CHARTS; do
            if [[ ! " ${SELECTED_CHARTS[*]} " =~ " $chart " ]] && [[ "$chart" != "$UNIVERSAL_DEPENDENCY" ]]; then
              mv "$CHARTS_DIR/$chart" "$TEMP_DIR/"
              echo "Moved $chart to $TEMP_DIR"
            fi
          done

          # Вывод оставшихся чартов для отладки
          echo "Charts remaining in $CHARTS_DIR:"
          ls -1 "$CHARTS_DIR"

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Install chart-releaser CLI
        run: |
          curl -sSL https://github.com/helm/chart-releaser/releases/download/v1.7.0/chart-releaser_1.7.0_linux_amd64.tar.gz | tar -xz
          sudo mv cr /usr/local/bin

      - name: Package charts manually
        run: |
          mkdir -p .cr-release-packages
          for chart_path in $(find ./charts -name 'Chart.yaml'); do
            chart_dir=$(dirname "$chart_path")
            echo "Packaging chart: $chart_dir"
            helm dependency update "$chart_dir"
            helm package "$chart_dir" --destination .cr-release-packages
          done

      # Загрузка пакетов в GitHub Releases
      - name: Upload charts to GitHub Releases
        run: |
          cr upload \
            --owner ${{ github.repository_owner }} \
            --git-repo ${{ github.event.repository.name }} \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --package-path .cr-release-packages \
            --skip-existing

      # Обновление index.yaml и пуш в gh-pages
      - name: Update index.yaml and push to gh-pages
        run: |
          cr index \
            --owner ${{ github.repository_owner }} \
            --git-repo ${{ github.event.repository.name }} \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --package-path .cr-release-packages \
            --index-path index.yaml \
            --pages-branch gh-pages \
            --push
