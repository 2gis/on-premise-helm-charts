name: Publish Helm Charts to ghcr.io
run-name: "Publish Helm Charts for Tag ${{ inputs.tag || github.event_name }} (Run #${{ github.run_number }})"

# После удачного завершения этого workflow автоматически запускается Build and Push Data Updater Docker Image
# Запуск происходит на основании имени этого workflow, поэтому менять его нежелательно

on:
  push:
    tags:
      - '[A-Za-z]+-[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch: # Также можно вручную запускать workflow.
    inputs:
      tag:
        description: "Tag to process"
        required: true
        default: "Platform-2.0.0"

jobs:
  publish-helm-charts:
    runs-on: ubuntu-latest
    steps:
      # ШАГ 1. Узнаем, откуда пришел workflow (пуш тега или ручной запуск)
      - name: Determine if workflow is running from tag or input
        id: determine_tag
        run: |
          # Определяем, был ли использован workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RAW_TAG="${{ inputs.tag }}"
            echo "Using input tag: $RAW_TAG"
          else
            RAW_TAG="${GITHUB_REF#refs/tags/}"
            echo "Using pushed tag: $RAW_TAG"
          fi

          echo "RAW_TAG=$RAW_TAG" >> $GITHUB_ENV

      # ШАГ 2. Извлекаем группу и версию
      - name: Extract group and version from tag
        id: extract_group
        run: |
          GROUP=$(echo "$RAW_TAG" | grep -oE '^(PRO|Platform|Citylens|Evergis|Core)')
          VERSION=$(echo "$RAW_TAG" | sed -E 's/^(PRO|Platform|Citylens|Evergis|Core)-//')

          echo "GROUP=$GROUP" >> $GITHUB_ENV
          echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV

      # ШАГ 3. Checkout репозитория на указанный тег
      - name: Checkout repository at specified tag
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RAW_TAG }}

      # ШАГ 4. Подтверждаем, что переключение на тег прошло успешно
      - name: Confirm current tag
        run: |
          echo "Checked out to tag: ${{ env.RAW_TAG }}"
          git rev-parse HEAD
          git describe --tags

      # ШАГ 5. Устанавливаем Helm
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: latest # Используем последнюю стабильную версию Helm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ШАГ 6. Фильтруем чарты по группе и сохраняем зависимый чарт
      - name: Filter charts by group
        id: filter_charts
        run: |
          echo "Filtering charts for group: $GROUP"

          CHARTS_DIR="charts"
          TEMP_DIR="charts_temp"
          mkdir -p "$TEMP_DIR"

          # Списки чартов по группам
          declare -A GROUP_CHARTS
          GROUP_CHARTS["PRO"]="pro-api pro-ui"
          GROUP_CHARTS["Citylens"]="citylens citylens-routes-ui"
          GROUP_CHARTS["Evergis"]="gis-platform"
          GROUP_CHARTS["Core"]="keys license keycloak"

          # Универсальная зависимость
          UNIVERSAL_DEPENDENCY="generic-chart"

          # Получаем все чарты
          ALL_CHARTS=$(ls -1 "$CHARTS_DIR")

          # Определяем чарты для сборки
          if [[ "$GROUP" == "Platform" ]]; then
            # Все чарты, кроме тех, что входят в другие группы
            EXCLUDED=()
            for g in "${!GROUP_CHARTS[@]}"; do
              for c in ${GROUP_CHARTS[$g]}; do
                EXCLUDED+=("$c")
              done
            done

            SELECTED_CHARTS=()
            for chart in $ALL_CHARTS; do
              if [[ ! " ${EXCLUDED[*]} " =~ " $chart " ]]; then
                SELECTED_CHARTS+=("$chart")
              fi
            done
          else
            SELECTED_CHARTS=(${GROUP_CHARTS[$GROUP]})
          fi

          echo "Selected charts: ${SELECTED_CHARTS[*]}"
          echo "Universal dependency: $UNIVERSAL_DEPENDENCY"

          # Удаляем всё, что не входит в SELECTED_CHARTS и не является universal dependency
          for chart in $ALL_CHARTS; do
            if [[ ! " ${SELECTED_CHARTS[*]} " =~ " $chart " ]] && [[ "$chart" != "$UNIVERSAL_DEPENDENCY" ]]; then
              mv "$CHARTS_DIR/$chart" "$TEMP_DIR/"
              echo "Moved $chart to $TEMP_DIR"
            fi
          done

          echo "Charts remaining in $CHARTS_DIR:"
          ls -1 "$CHARTS_DIR"

          echo "dependency=$UNIVERSAL_DEPENDENCY" >> $GITHUB_OUTPUT

      # ШАГ 7. Упаковываем чарты
      - name: Find and package Helm charts
        run: |
          echo "Using version: $TAG_VERSION"
          mkdir -p ./packaged

          DEPENDENCY="${{ steps.filter_charts.outputs.dependency }}"

          for chart_path in $(find ./charts -name 'Chart.yaml'); do
            chart_dir=$(dirname "$chart_path")
            chart_name=$(basename "$chart_dir")

            # Пропускаем универсальную зависимость
            if [[ "$chart_name" == "$DEPENDENCY" ]]; then
              echo "Skipping $chart_name (used as dependency only)"
              continue
            fi

            echo "Processing chart: $chart_name"

            current_version=$(grep '^version:' "$chart_path" | awk '{print $2}')
            if [ "$current_version" != "$TAG_VERSION" ]; then
              echo "Error: Version mismatch in $chart_path. Expected: $TAG_VERSION, Found: $current_version"
              exit 1
            fi

            echo "Version in $chart_path matches the expected version: $TAG_VERSION"
            # Обновляем зависимости чарта
            echo "Updating dependencies for chart: $chart_dir"
            helm dependency update "$chart_dir"
            # Упаковываем чарт
            helm package "$chart_dir" --destination ./packaged
          done

      # ШАГ 8. Вход в GitHub Container Registry
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # ШАГ 9. Публикуем чарты
      - name: Push packaged Helm charts to ghcr.io
        run: |
          for chart in ./packaged/*.tgz; do
            echo "Pushing chart: $chart -> ghcr.io/${{ github.repository_owner }}/charts"
            helm push $chart oci://ghcr.io/${{ github.repository_owner }}/charts
          done
