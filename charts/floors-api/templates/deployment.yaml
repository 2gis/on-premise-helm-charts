---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "floors.fullname" . }}
  {{- if .Values.annotations }}
  annotations:
    {{- toYaml .Values.annotations | nindent 4 }}
  {{- end }}
  labels:
    {{- include "floors.labels" . | nindent 4 }}
  {{- if .Values.labels }}
    {{- toYaml .Values.labels | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- if .Values.strategy }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "floors.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        checksum/custom-ca: {{ include "floors.checksum" (merge (dict "path" "/custom-ca.configmap.yaml") $) }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "floors.selectorLabels" . | nindent 8 }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      initContainers:
        - name: import
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.import.image.repository }}:{{ .Values.import.image.tag }}
          imagePullPolicy: {{ .Values.import.imagePullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          env:
            - name: IMPORTER_S3_ENDPOINT
              value: "{{ .Values.dgctlStorage.host }}"
            - name: IMPORTER_S3_BUCKET
              value: "{{ .Values.dgctlStorage.bucket }}"
            - name: IMPORTER_S3_ACCESS_KEY
              value: "{{ .Values.dgctlStorage.accessKey }}"
            - name: IMPORTER_S3_SECRET_KEY
              value: "{{ .Values.dgctlStorage.secretKey }}"
            - name: IMPORTER_S3_MANIFEST
              value: "{{ .Values.dgctlStorage.manifest }}"
            - name: IMPORTER_S3_USE_PATH_STYLE
              value: "{{ .Values.dgctlStorage.usePathStyle }}"
            - name: IMPORTER_S3_REGION
              value: "{{ .Values.dgctlStorage.region }}"
            - name: IMPORTER_S3_SECURE
              value: "{{ .Values.dgctlStorage.secure }}"
            {{- if $.Values.customCAs.bundle }}
            - name: IMPORTER_SSL_CERT_FILE
              value: {{ include "floors.customCA.mountPath" $ }}/custom-ca.crt
            {{- end }}
          volumeMounts:
            - name: {{ include "floors.fullname" $ }}-data
              mountPath: "/var/floorsConvertedData"
            {{- if $.Values.customCAs.bundle }}
            - name: custom-ca
              mountPath: {{ include "floors.customCA.mountPath" $ }}/custom-ca.crt
              subPath: custom-ca.crt
              readOnly: true
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      containers:
        - name: {{ .Chart.Name }}-nodejs
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.nodejs.image.repository }}:{{ .Values.nodejs.image.tag }}
          imagePullPolicy: {{ .Values.nodejs.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          env:
          ports:
            - name: nodejs-http
              containerPort: 8881
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: nodejs-http
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: nodejs-http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          volumeMounts:
            - name: {{ include "floors.fullname" $ }}-data
              mountPath: "/var/floorsConvertedData"
        - name: {{ .Chart.Name }}-nginx
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          command: ["nginx", "-c", "/etc/2gis/nginx.conf"]
          {{- if (le .Values.nginx.httpPort 1024.0) }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
            capabilities:
              add:
                - NET_BIND_SERVICE
          {{- end }}
          ports:
            - name: nginx-http
              containerPort: {{ .Values.nginx.httpPort }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.nginx.httpPort }}
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 15"]
          volumeMounts:
            - name: {{ include "floors.fullname" $ }}-configmap
              mountPath: /etc/2gis
      volumes:
        - name: {{ include "floors.fullname" . }}-configmap
          configMap:
            name: {{ include "floors.fullname" . }}
            items:
              - key: nginx_config
                path: nginx.conf
              - key: servers_conf
                path: servers.conf
        - name: {{ include "floors.fullname" $ }}-data
          emptyDir: {}
          {{- if $.Values.customCAs.bundle }}
        - name: custom-ca
          configMap:
            name: {{ include "floors.fullname" $ }}-custom-ca
        {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
