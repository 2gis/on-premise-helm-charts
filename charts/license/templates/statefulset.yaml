{{- with .Values -}}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "license.fullname" $ }}
  {{- if not (empty .annotations) }}
  annotations:
    {{- toYaml .annotations | nindent 4 }}
  {{- end }}
  labels:
    {{- include "license.labels" $ | nindent 4 }}
    {{- if not (empty .labels) }}
    {{- toYaml .labels | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "license.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include "license.checksum" (merge (dict "path" "/configmap.yaml") $) }}
        checksum/secret: {{ include "license.checksum" (merge (dict "path" "/secret.yaml") $) }}
        {{- if not (empty .podAnnotations) }}
        {{- toYaml .podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "license.labels" $ | nindent 8 }}
        {{- if not (empty .podLabels) }}
        {{- toYaml .podLabels | nindent 8 }}
        {{- end }}
    spec:
      containers:
        - name: license
          {{- with .image }}
          image: "{{ required "A valid $.Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .repository }}:{{ .tag }}"
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          command: ["/bin/license"]
          ports:
            - containerPort: {{ .license.statusPort }}
              name: status
            - containerPort: {{ .license.apiPort }}
              name: api
          startupProbe:
            {{- $startupInitialDelaySeconds := 10 }}
            {{- $startupPeriodSeconds := include "license.durationToSeconds" (dict "duration" $.Values.license.retryPeriod) }}
            {{- $startupFailureThreshold := 3 }}
            httpGet:
              port: status
              path: /healthcheck
            initialDelaySeconds: {{ $startupInitialDelaySeconds }}
            periodSeconds: {{ $startupPeriodSeconds }}
            timeoutSeconds: 10
            failureThreshold: {{ $startupFailureThreshold }}
          livenessProbe:
            httpGet:
              port: status
              path: /healthcheck
            initialDelaySeconds: {{ add $startupInitialDelaySeconds (mul $startupPeriodSeconds $startupFailureThreshold) }}
            periodSeconds: 40
            timeoutSeconds: 10
            failureThreshold: 3
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /persistence
              name: persistence
          env:
            - name: CONFIG_PATH
              value: /config/config.yaml
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "license.fullname" $ }}
                  key: s3AccessKey
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "license.fullname" $ }}
                  key: s3SecretKey
          resources:
            {{- toYaml .resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "license.fullname" $ }}
      {{- if not (empty .nodeSelector) }}
      nodeSelector:
        {{- toYaml .nodeSelector | nindent 8 }}
      {{- end }}
      {{- if not (empty .affinity) }}
      affinity:
        {{- toYaml .affinity | nindent 8 }}
      {{- end }}
      {{- if not (empty .tolerations) }}
      tolerations:
        {{- toYaml .tolerations | nindent 8 }}
      {{- end }}
      {{- if not (empty .imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml .imagePullSecrets | nindent 8 }}
      {{- end }}
  {{- with .persistence }}
  volumeClaimTemplates:
    - metadata:
        name: persistence
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: {{ .storage }}
        storageClassName: {{ .storageClassName }}
  {{- end }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete

{{- end -}}
