# @section Docker Registry settings

# @param dgctlDockerRegistry Docker Registry endpoint where On-Premise services' images reside. Format: `host:port`.

dgctlDockerRegistry: ''

# @section Common settings

# @param nameOverride Base name to use in all the Kubernetes entities deployed by this chart.
# @param fullnameOverride Base fullname to use in all the Kubernetes entities deployed by this chart.

# @param annotations Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param labels Kubernetes [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).

# @param replicaCount A replica count for the pod.
# @param podAnnotations Kubernetes pod [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param podLabels Kubernetes pod [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
# @param livenessProbeDelay Initial delay for liveness probes.
# @param readinessProbeDelay Initial delay for readiness probes.

# @param nodeSelector Kubernetes pod [node selectors](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector).
# @param tolerations Kubernetes pod [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) settings.
# @param affinity Kubernetes pod [affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) settings.

# @param imagePullSecrets Kubernetes image pull secrets.

nameOverride: ''
fullnameOverride: ''

annotations: {}
labels: {}

replicaCount: 1
podAnnotations: {}
podLabels: {}
livenessProbeDelay: 60
readinessProbeDelay: 75

nodeSelector: {}
tolerations: []
affinity: {}

imagePullSecrets: []

# @section Deployment settings

# @param image.repository Repository.
# @param image.tag Tag.
# @param image.pullPolicy Pull Policy.

image:
  repository: 2gis-on-premise/license
  tag: 1.0.0
  pullPolicy: IfNotPresent

# @section License service application settings


# @param license.path License file path in storage.
# @param license.updatePeriod Duration how often service should fetch new license from storage. Duration format is any string supported by (time.ParseDuration)[https://pkg.go.dev/time#ParseDuration] plus additionally 'd' for days and 'w' for weeks time units are supported.
# @param license.retryPeriod Duration how often service should try to fetch license from storage if previous attempts were failing.
# @param license.softBlockPeriod Duration until the license expiration time when license service should respond with 'soft' block status.
# @skip license.appPort

license:
  path: ''
  updatePeriod: 1h
  retryPeriod: 30s
  softBlockPeriod: 2w
  appPort: 8080

# @section Service settings

# @param service.type Kubernetes [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
# @param service.port Service port.
# @param service.annotations Kubernetes [service annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param service.labels Kubernetes [service labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).

service:
  type: ClusterIP
  port: 80
  annotations: {}
  labels: {}

# @section Kubernetes [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) settings

# @param ingress.enabled If Ingress is enabled for the service.
# @param ingress.hosts[0].host Hostname for the Ingress service. Ex.: 'license.ingress.host'.

ingress:
  enabled: false
  hosts:
    - host: ''

# @section Limits

# @param resources.requests.cpu A CPU request.
# @param resources.requests.memory A memory request.
# @param resources.limits.cpu A CPU limit.
# @param resources.limits.memory A memory limit.

resources:
  limits:
    cpu: 1
    memory: 512Mi
  requests:
    cpu: 50m
    memory: 128Mi

# @section Deployment Artifacts Storage settings

# @param dgctlStorage.host S3 endpoint. Format: `host:port`.
# @param dgctlStorage.bucket S3 bucket name.
# @param dgctlStorage.accessKey S3 access key for accessing the bucket.
# @param dgctlStorage.secretKey S3 secret key for accessing the bucket.

dgctlStorage:
  host: ''
  bucket: ''
  accessKey: ''
  secretKey: ''
