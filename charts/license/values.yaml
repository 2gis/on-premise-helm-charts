# @section Docker Registry settings

# @param dgctlDockerRegistry Docker Registry endpoint where On-Premise services' images reside. Format: `host:port`.

dgctlDockerRegistry: ''

# @section Deployment Artifacts Storage settings

# @param dgctlStorage.host S3 endpoint. Format: `host:port`.
# @param dgctlStorage.secure If S3 uses https.
# @param dgctlStorage.bucket S3 bucket name.
# @param dgctlStorage.accessKey S3 access key for accessing the bucket.
# @param dgctlStorage.secretKey S3 secret key for accessing the bucket.

dgctlStorage:
  host: ''
  secure: false
  bucket: ''
  accessKey: ''
  secretKey: ''

# @section Common settings

# @param nameOverride Base name to use in all the Kubernetes entities deployed by this chart.
# @param fullnameOverride Base fullname to use in all the Kubernetes entities deployed by this chart.

# @param annotations Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param labels Kubernetes [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).

# @param podAnnotations Kubernetes pod [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param podLabels Kubernetes pod [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).

# @param serviceAccountOverride Kubernetes pod [service account](https://kubernetes.io/docs/concepts/security/service-accounts/). Should include rule for watching pods in current namespace. If not defined it will be created automatically. Not needed for license type 1.

# @param nodeSelector Kubernetes pod [node selectors](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector).
# @param tolerations Kubernetes pod [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) settings.
# @param affinity Kubernetes pod [affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) settings.

# @param imagePullSecrets Kubernetes image pull secrets.

nameOverride: ''
fullnameOverride: ''

annotations: {}
labels: {}

podAnnotations: {}
podLabels: {}

serviceAccountOverride: ''

nodeSelector: {}
tolerations: []
affinity: {}

imagePullSecrets: []

# @section StatefulSet settings

# @param image.repository Repository.
# @param image.tag Tag.
# @param image.pullPolicy Pull Policy.

image:
  repository: 2gis-on-premise/license
  tag: 2.2.0
  pullPolicy: IfNotPresent

# @section License service application settings

# @param license.type License type. Should be auto generated with `dgctl pull --generate-values`.
# @param license.retryPeriod Duration how often service should try to fetch license from storage if previous attempts were failing. Duration format is any string supported by (time.ParseDuration)[https://pkg.go.dev/time#ParseDuration].
# @param license.softBlockPeriod Duration until the license expiration time when license service should respond with 'soft' block status. For this duration additional time units 'd' for days and 'w' for weeks are supported.
# @skip license.statusPort
# @skip license.apiPort

license:
  type: ''
  retryPeriod: 30s
  softBlockPeriod: 2w
  statusPort: 8080
  apiPort: 8443

# @section Service settings

# @param service.type Kubernetes [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
# @param service.statusPort Service port for status page and api/v1 (HTTP).
# @param service.apiPort Service port for api/v2 (HTTPS).
# @param service.annotations Kubernetes [service annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param service.labels Kubernetes [service labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).

service:
  type: ClusterIP
  statusPort: 80
  apiPort: 443
  annotations: {}
  labels: {}

# @section Kubernetes [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) settings

# @param ingress.enabled If Ingress is enabled for the service.
# @param ingress.className Name of the Ingress controller class.
# @param ingress.hosts[0].host Hostname for the Ingress service.
# @param ingress.hosts[0].paths[0].path Path of the host for the Ingress service.
# @param ingress.hosts[0].paths[0].pathType Type of the path for the Ingress service.
# @param ingress.tls TLS configuration

ingress:
  enabled: false
  className: nginx
  hosts:
  - host: license.example.com
    paths:
    - path: /
      pathType: Prefix
  tls: []
  # - hosts:
  #   - license.example.com
  #   secretName: secret.tls

# @section Limits

# @param resources.requests.cpu A CPU request.
# @param resources.requests.memory A memory request.
# @param resources.limits.cpu A CPU limit.
# @param resources.limits.memory A memory limit.

resources:
  limits:
    cpu: 1
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 128Mi

# @section Persistence settings

# @param persistence.host S3 endpoint. Format: `host:port`.
# @param persistence.secure If S3 uses https.
# @param persistence.bucket S3 bucket name.
# @param persistence.root Root directory in S3 bucket.
# @param persistence.accessKey S3 access key for accessing the bucket.
# @param persistence.secretKey S3 secret key for accessing the bucket.

persistence:
  host: ''
  secure: false
  bucket: ''
  root: ''
  accessKey: ''
  secretKey: ''

# @section TPM-related settings for license type 2

# @param tpm.securityContext Main container [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/). Should enable access to the host TPM device (/dev/tpmrm0).
# @param tpm.mountTPMDevice If TPM device should be mounted to the main container. Required if no TPM device plugin is used. Additionally, requires privileged access for the main container.
# @extra tpm.pvcBind **Kubernetes PVC used to bind pod to the kubernetes node; not needed if FS persistence is used**
# @param tpm.pvcBind.enable If PVC should be used to bind pod to the kubernetes node.
# @param tpm.pvcBind.storageClassName Storage class name.

tpm:
  securityContext: {}
  mountTPMDevice: false
  pvcBind:
    enable: false
    storageClassName: ''

# @section **Custom Certificate Authority**

# @param customCAs.bundle Custom CA [text representation of the X.509 PEM public-key certificate](https://www.rfc-editor.org/rfc/rfc7468#section-5.1)
# @param customCAs.certsPath Custom CA bundle mount directory in the container.

customCAs:
  bundle: ''
  # bundle: |
  #   -----BEGIN CERTIFICATE-----
  #   ...
  #   -----END CERTIFICATE-----
  certsPath: ''
