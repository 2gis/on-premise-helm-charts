apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "castle.fullname" . }}-builder-config
data:
  config_builder.conf: |-
    # --------------------------------------------
    # COMMON CONFIGURATION
    lock_file_location:'/var/run/2gis/%service%.lock'
    service_name: 'castle'
    # LOGGING
    log_level: 'DEBUG'
    log_location:'/var/log/castle-%service%.log'
    # PATHS AND FILE PROPERTIES
    # owner for result files
    owner: 'root:root'
    # path to store city data
    data_destination_dir: {{ .Values.castle.castle_data_path | quote }}
    # --------------------------------------------
    # CONFIGURATION BUILDER ONLY
    # BUILDING CITY CONFIGURATION FROM TEMPLATE
    # path to conf files and templates
    work_dir: '{{ .Values.castle.castle_data_path }}'
    # path to store temporary configs
    tmp_dir: '/opt/castle/tmp/'
    templates:
    {
        # template file name in work_dir: 'full path to result destination'
        'cities_template': '{{ .Values.castle.castle_data_path }}/cities.conf'
    }
    cities_file: 'cities.conf'
    cities_zip_file: 'cities.conf.zip'
    index_file: 'index.json'
    index_zip_file: 'index.json.zip'
    # UPDATING CITY DATA
    s3:
    {
    server: '{{ required "Valid .Values.dgctlStorage.host required!" .Values.dgctlStorage.host }}',
    bucket: '{{ required "Valid .Values.dgctlStorage.bucket required!" .Values.dgctlStorage.bucket }}',
    login: '{{ required "Valid .Values.dgctlStorage.accessKey required!" .Values.dgctlStorage.accessKey }}',
    pwd: '{{ required "Valid .Values.dgctlStorage.secretKey required!" .Values.dgctlStorage.secretKey }}',
    header: 'Last-Modified',
    }
    manifest:
    {
        pattern: '{{ default "/manifests/" .Values.dgctlStorage.manifest }}',
        service: 'routing',
    }
    # --------------------------------------------
    # DATA PACKAGE
    imports:
    {
        remote_name: '%path%',
        remote_dir: '',

        package: '%project%.2gis',
        package_info:
        {
            local_name: '%issue-month%_%timestamp%.2gis',
            local_dir: 'packages/%project%',
        },

        restriction: '%project%-restriction.json',
        restriction_info:
        {
            local_name: '%current-date%_%hour%.json',
            local_dir: 'restrictions_json/%project%'
        },

        unpack: 'tar',
        meta: '%project%.json'
    }

    restriction:
    {
        remote_name: '',
        remote_dir: '',

        local_name: '%project%-restriction.json',
        local_dir: 'restrictions/%project%',

        tmp_name: '%project%-restriction.json',

        http:
        {
            server: '{{ .Values.castle.restrictions_api_url }}',
            base_dir: 'edges/',
            api_key: '{{ .Values.castle.restrictions_api_key }}',
            timeout: 5  #sec
        },

        store_period: 'week'
    }
  cities_template: |-
    [
    {% for project in projects %}
        {
            "name" : "{{`{{project.name}}`}}",
            "id" : {{`{{project.id}}`}},
            "country" : "{{`{{project.country}}`}}",
            "time_zone" : "{{`{{project.time_zone}}`}}",
            "bound" : "{{`{{project.wkt}}`}}",
            "centroid" : "POINT({{`{{project.centroid}}`}})"
        },{% endfor %}
        {
        }
    ]
 
