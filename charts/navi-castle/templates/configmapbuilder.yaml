apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "castle.fullname" . }}-builder-config
data:
  config_builder.conf: |-
    # --------------------------------------------
    # COMMON CONFIGURATION
    lock_file_location:'/var/run/2gis/%service%.lock'
    service_name: 'castle'
    # LOGGING
    log_level: 'DEBUG'
    log_location:'/var/log/castle-%service%.log'
    # PATHS AND FILE PROPERTIES
    # path to store city data
    data_destination_dir: {{ .Values.castle.castleDataPath | quote }}
    # --------------------------------------------
    # CONFIGURATION BUILDER ONLY
    # BUILDING CITY CONFIGURATION FROM TEMPLATE
    # path to conf files and templates
    work_dir: '{{ .Values.castle.castleDataPath }}'
    # path to store temporary configs
    tmp_dir: '/opt/castle/tmp/'
    templates:
    {
        # template file name in work_dir: 'full path to result destination'
        'cities_template': '{{ .Values.castle.castleDataPath }}/cities.conf'
    }
    cities_file: 'cities.conf'
    cities_zip_file: 'cities.conf.zip'
    index_file: 'index.json'
    index_zip_file: 'index.json.zip'
    # UPDATING CITY DATA
    s3:
    {
    server: '{{ .Values.dgctlStorage.secure | ternary "https" "http" }}://{{ required "Valid .Values.dgctlStorage.host required!" .Values.dgctlStorage.host }}',
    region: '{{ required "Valid .Values.dgctlStorage.region required!" .Values.dgctlStorage.region }}',
    bucket: '{{ required "Valid .Values.dgctlStorage.bucket required!" .Values.dgctlStorage.bucket }}',
    login: '{{ required "Valid .Values.dgctlStorage.accessKey required!" .Values.dgctlStorage.accessKey }}',
    pwd: '{{ required "Valid .Values.dgctlStorage.secretKey required!" .Values.dgctlStorage.secretKey }}',
    header: 'Last-Modified',
    }
    manifest:
    {
        pattern: '{{ default "/manifests/" .Values.dgctlStorage.manifest }}',
        service: ['navi','navi-restrictions'],
        mapping: {
            'navi': 'import_package',
            'navi-restrictions': 'import_restriction'
        }
    }
    # --------------------------------------------
    # DATA PACKAGE

    {{- /* Guard incompatible services enabling */}}
    {{- with .Values.cron.enabled }}
      {{- if (and .restriction .restrictionImport) }}
        {{- fail "Only one of restriction and restrictionImport can be active at once." }}
      {{- end }}{{- /* if */}}
    {{- end }}{{- /* with */}}

    {{- if .Values.cron.enabled.restriction }}
    restriction:
    {
        remote_name: '',
        remote_dir: '',

        local_name: 'restrictions-%project%.json',
        local_dir: 'restrictions/%project%',

        tmp_name: '%project%-restriction.json',

        http:
        {
            server: '{{ .Values.castle.restrictions.host }}',
            base_dir: 'edges/',
            api_key: '{{ .Values.castle.restrictions.key }}',
            timeout: 5  #sec
        },

        store_period: 'week'
    }
    {{- end }}{{- /* .Values.cron.enabled.restriction */}}

    {{- if .Values.cron.enabled.restrictionImport }}
    import_restriction:
    {
        remote_name: '',
        remote_dir: '',

        local_name: '%current-date%_%hour%.json',
        local_dir: 'restrictions_json/%project%'

        unpack: 'tar',
        meta: '%project%.json'
        content: '%project%-restriction.json',
        item: 'restriction',
        store_period: 'week'
    }
    {{- end }}{{- /* .Values.cron.enabled.restrictionImport */}}

    {{- if .Values.cron.enabled.import }}
    import_package:
    {
        remote_name: '',
        remote_dir: '',
        local_name: '%issue-month%_%timestamp%.2gis',
        local_dir: 'packages/%project%',

        unpack: 'tar',
        meta: '%project%.json',
        content: '%project%.2gis',
        item: 'package',
        store_period: 'month'
    }
    {{- end }}{{- /* .Values.cron.enabled.import */}}

  cities_template: |-
    [
    {% for project in projects %}
        {
            "name" : "{{`{{project.name}}`}}",
            "id" : {{`{{project.id}}`}},
            "country" : "{{`{{project.country}}`}}",
            "time_zone" : "{{`{{project.time_zone}}`}}",
            "bound" : "{{`{{project.wkt}}`}}",
            "centroid" : "POINT({{`{{project.centroid}}`}})"
        },{% endfor %}
        {
        }
    ]

  update_services: |
    {{- range $_, $flavor := tuple "import" "restriction" "restrictionImport" }}
    {{- if index $.Values.cron.enabled $flavor }}
    {{ index $.Values.cron.schedule $flavor }} /opt/configuration_builder --config /opt/config_builder.conf --service={{ include "castle.serviceParameter" ( dict "flavor" $flavor ) }} --jobs={{ $.Values.castle.jobs | default 1 | int }}
    {{- end }}
    {{- end }}
