apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "castle.fullname" . }}-builder-config
data:
  config_builder.conf: |-
    # --------------------------------------------
    # COMMON CONFIGURATION
    lock_file_location:'/var/run/2gis/%service%.lock'
    service_name: 'castle'
    # PATHS AND FILE PROPERTIES
    # path to store city data
    data_destination_dir: {{ .Values.castle.castleDataPath | squote }}
    # --------------------------------------------
    # CONFIGURATION BUILDER ONLY
    # BUILDING CITY CONFIGURATION FROM TEMPLATE
    # path to conf files and templates
    work_dir: '{{ .Values.castle.castleDataPath }}'
    # path to store temporary configs
    tmp_dir: '{{ .Values.castle.castleDataPath }}/tmp/'
    templates:
    {
        # template file name in work_dir: 'full path to result destination'
        'cities_template': '{{ .Values.castle.castleDataPath }}/cities.conf'
    }
    cities_file: 'cities.conf'
    cities_zip_file: 'cities.conf.zip'
    index_file: 'index.json'
    index_zip_file: 'index.json.zip'
    # UPDATING CITY DATA
    s3:
    {
        server: '{{ .Values.dgctlStorage.secure | ternary "https" "http" }}://{{ required "Valid .Values.dgctlStorage.host required!" .Values.dgctlStorage.host }}',
        {{- if .Values.dgctlStorage.region }}
        region: '{{ .Values.dgctlStorage.region }}',
        {{- end }}
        bucket: '{{ required "Valid .Values.dgctlStorage.bucket required!" .Values.dgctlStorage.bucket }}',
        login: '{{ required "Valid .Values.dgctlStorage.accessKey required!" .Values.dgctlStorage.accessKey }}',
        pwd: '{{ required "Valid .Values.dgctlStorage.secretKey required!" .Values.dgctlStorage.secretKey }}',
        header: 'Last-Modified',
    }
    manifest:
    {
        pattern: '{{ default "/manifests/" .Values.dgctlStorage.manifest }}',
        service: ['navi'],
        type_mapping: {
            '': 'import_package',
            'restrictions': 'import_restriction'
        }
    }
    # --------------------------------------------
    # DATA PACKAGE

    {{- /* Guard incompatible services enabling */}}
    {{- with .Values.cron.enabled }}
      {{- if (and .restriction .restrictionImport) }}
        {{- fail "Only one of restriction and restrictionImport can be active at once." }}
      {{- end }}{{- /* if */}}
    {{- end }}{{- /* with */}}

    {{- if or .Values.cron.enabled.restriction .Values.init.enabled.restriction }}
    restriction:
    {
        remote_name: 'edges/',
        remote_dir: '',

        local_name: 'restrictions-%project%.json',
        local_dir: 'restrictions/%project%',

        tmp_name: '%project%-restriction.json',

        http:
        {
            {{- /* backward compatibility to be removed later since
                 * restrictions.host renamed to restrictions.url */}}
            server: '{{ .Values.castle.restrictions.url | default .Values.castle.restrictions.host }}',
            base_dir: '',
            api_key: '{{ .Values.castle.restrictions.key }}',
            timeout: 5  #sec
        },

        store_period: {{ .Values.castle.storePeriod.restriction | squote }}
    }
    {{- end }}{{- /* or .Values.cron.enabled.restriction .Values.init.enabled.restriction */}}

    {{- if or .Values.cron.enabled.restrictionImport .Values.init.enabled.restrictionImport }}
    import_restriction:
    {
        remote_name: '',
        remote_dir: '',

        local_name: '%current-date%_%hour%.json',
        local_dir: 'restrictions_json/%project%'

        unpack: 'tar',
        meta: '%project%.json'
        content: '%project%-restriction.json',
        item: 'restriction',
        store_period: {{ .Values.castle.storePeriod.restrictionImport | squote }}
    }
    {{- end }}{{- /* or .Values.cron.enabled.restrictionImport .Values.init.enabled.restrictionImport */}}

    {{- if or .Values.cron.enabled.import .Values.init.enabled.import }}
    import_package:
    {
        remote_name: '',
        remote_dir: '',
        local_name: '%issue-month%_%timestamp%.2gis',
        local_dir: 'packages/%project%',

        unpack: 'tar',
        meta: '%project%.json',
        content: '%project%.2gis',
        item: 'package',
        store_period: {{ .Values.castle.storePeriod.import | squote }}
    }
    {{- end }}{{- /* or .Values.cron.enabled.import .Values.init.enabled.import */}}
  {{- if .Values.rtr.enabled }}
  config_builder_rtr.conf: |-
    # --------------------------------------------
    # COMMON CONFIGURATION
    lock_file_location:'/var/run/2gis/%service%.lock'
    service_name: 'castle'
    # LOGGING
    log_level: '{{ .Values.castle.logLevel }}'
    # PATHS AND FILE PROPERTIES
    # path to store city data
    data_destination_dir: {{ .Values.castle.castleDataPath | squote }}
    # --------------------------------------------
    # CONFIGURATION BUILDER ONLY
    # BUILDING CITY CONFIGURATION FROM TEMPLATE
    # path to conf files and templates
    work_dir: '{{ .Values.castle.castleDataPath }}'
    # path to store temporary configs
    tmp_dir: '{{ .Values.castle.castleDataPath }}/tmp/'
    templates:
    {
        # template file name in work_dir: 'full path to result destination'
        'cities_template': '{{ .Values.castle.castleDataPath }}/cities.conf'
    }
    cities_file: 'cities.conf'
    cities_zip_file: 'cities.conf.zip'
    index_file: 'index.json'
    index_zip_file: 'index.json.zip'
    restriction_index_file: 'restrictions_index.json'
    restriction_index_zip_file: 'restrictions_index.json.zip'
    http:
    {
        server: '{{ .Values.rtr.buildFtp.serverUrl }}',
        base_dir: '{{ .Values.rtr.buildFtp.baseDir }}/',
        login: '{{ .Values.rtr.buildFtp.login }}',
        pwd: 'from-env',
        header: 'Last-Modified',
        timeout: 30  #sec
    }

    webapi:
    {
        server: '{{ .Values.rtr.webapi.serverUrl }}',
        base_dir: '{{ .Values.rtr.webapi.baseDir }}',
        local_name: 'webapi',
        header: 'Date',
        timeout: 10  #sec
    }

    # --------------------------------------------
    # Puzzle list
    puzzle:
    {
        server: '{{ .Values.rtr.puzzle.serverUrl }}',
        base_dir: '{{ .Values.rtr.puzzle.baseDir }}',
        local_name: 'puzzle_geometry',
        timeout: 10  #sec
    }

    # --------------------------------------------
    # Puzzle segments
    puzzle_segments:
    {
        server: '{{ .Values.rtr.puzzleSegments.serverUrl }}',
        base_dir: '{{ .Values.rtr.puzzleSegments.baseDir }}',
        local_name: 'puzzle_segments.%version%',
        timeout: 10  #sec
    }

    # --------------------------------------------
    # Prometheus list
    prometheus:
    {
        server: '{{ .Values.rtr.prometheus.serverUrl }}',
        base_dir: '{{ .Values.rtr.prometheus.baseDir }}',
        timeout: 10  #sec
    }

    restriction_json:
    {
        remote_name: 'restrictions-temp-%project%.json',
        remote_dir: '',

        local_name: '%project%-restriction.json',
        local_dir: 'restrictions/%project%',

        post_processing: RestrictionFilter

        http:
        {
            server: '{{ .Values.rtr.http.serverUrl }}',
            base_dir: '{{ .Values.rtr.http.baseDir }}/',
            header: 'Last-Modified',
            timeout: 20 #sec
        },
        kafka:
        {
            probe_path: '/var/run/2gis/castle_connect_kafka.lock',
            topic: '{{ .Values.rtr.kafka.topic }}',
            seek_to_begin: True,
            handler: RestrictionJsonLoader,
            config:
            {
                group_id: 'from-env',
            {{- /* app required config options for override env variables */}}
            {{- range $kafkaRole, $overridesProperty := (dict
                  "CONSUMER" "consumerOverrides"
                ) -}}
            {{- $overrides := dict }}
            {{- /* if override property key exists in values */}}
            {{- if (hasKey $.Values.rtr.kafka $overridesProperty) }}
              {{- $overrides = $overridesProperty | get ($overridesProperty | get $.Values.rtr.kafka)}}
            {{- end }}
            {{- include "castle.kafkaPropertiesConfig" (dict
                  "kafka" $.Values.rtr.kafka
                  "overrides" $overrides
                  "secretname" (print
                      (include "castle.fullname" $)
                      "-"
                      (lower $kafkaRole)
                    )
                  "mountpoint" (print "/etc/2gis/secret/" (lower $kafkaRole))
                ) | nindent 16}}
            {{- end }}{{- /* range */}}
            },

            {{- /* if rtr.roadLocks present */}}
            {{- if .Values.rtr.roadLocks.enabled }}
            road_locks_topic: '{{ .Values.rtr.roadLocks.kafka.topic }}',
            road_locks_handler: RestrictionEventLoader,
            road_locks:
            {
                group_id: 'from-env',
            {{- /* app required config options for override env variables */}}
            {{- range $kafkaRole, $overridesProperty := (dict
                  "CONSUMER" "consumerOverrides"
                ) -}}
            {{- $overrides := dict }}
            {{- /* if override property key exists in values */}}
            {{- if (hasKey $.Values.rtr.roadLocks.kafka $overridesProperty) }}
              {{- $overrides = $overridesProperty | get ($overridesProperty | get $.Values.rtr.roadLocks.kafka)}}
            {{- end }}
            {{- include "castle.kafkaPropertiesConfig" (dict
                  "kafka" $.Values.rtr.roadLocks.kafka
                  "overrides" $overrides
                  "secretname" (print
                      (include "castle.fullname" $)
                      "-"
                      (lower $kafkaRole)
                    )
                  "mountpoint" (print "/etc/2gis/secret/" (lower $kafkaRole))
                ) | nindent 16}}
            {{- end }}{{- /* range $kafkaRole, $overridesProperty */}}
            }
            {{- end }}{{- /* .Values.rtr.roadLocks.enabled */}}

        },
        store_period: {{ .Values.castle.storePeriod.rtr | squote }}
    }
  {{ end }}{{- /* .Values.rtr.enabled */}}


  cities_template: |-
    [
    {% for project in projects %}
        {
            "name" : "{{`{{project.name}}`}}",
            "id" : {{`{{project.id}}`}},
            "country" : "{{`{{project.country}}`}}",
            "time_zone" : "{{`{{project.time_zone}}`}}",
            "bound" : "{{`{{project.wkt}}`}}",
            "centroid" : "POINT({{`{{project.centroid}}`}})"
        },{% endfor %}
        {
        }
    ]

  update_services: |
    {{- range $_, $flavor := tuple "import" "restriction" "restrictionImport" }}
    {{- if index $.Values.cron.enabled $flavor }}
    {{ index $.Values.cron.schedule $flavor }} /opt/configuration_builder --config /opt/config_builder.conf --service={{ include "castle.serviceParameter" ( dict "flavor" $flavor ) }} --jobs={{ $.Values.castle.jobs | default 1 | int }}
    {{- end }}
    {{- end }}
