{{- define "splitter.deployment" }}
metadata:
  labels:
    rule: {{ .Values.splitter.app_rule | quote }}
    navigroup: {{ .Values.navigroup | default "" | quote }}
    {{- if .Values.dataGroup.enabled }}
    dataGroupTimestamp: {{ .Values.dataGroup.timestamp | quote }}
    dataGroupPrefix: {{ .Values.dataGroup.prefix | quote }}
    {{- end }}{{- /* dataGroup.enabled */}}
spec:
  template:
    metadata:
      labels:
        navigroup: {{ .Values.navigroup | default "" | quote }}
        {{- if .Values.dataGroup.enabled }}
        dataGroupTimestamp: {{ .Values.dataGroup.timestamp | quote }}
        dataGroupPrefix: {{ .Values.dataGroup.prefix | quote }}
        {{- end }}{{- /* dataGroup.enabled */}}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      containers:
        - name: {{ include "generic-chart.containerName" . }}-envoy
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: envoyproxy/envoy:v1.27.0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy/envoy.yaml
              subPath: envoy.yaml
          {{- if .Values.envoy.resources }}
          resources: {{- toYaml .Values.envoy.resources | nindent 12 }}
          {{- end }}
          lifecycle:
            # wait for the main container to shutdown
            preStop:
              exec:
                command: ["/bin/bash", "-c", "while cat < /dev/tcp/127.0.0.1/{{ .Values.splitter.appPort }} ; do sleep 5 ; done"]
          args:
            - -c
            - /etc/envoy/envoy.yaml
            - --log-level
            - {{ .Values.envoy.systemLogs.logLevel | quote }}
          {{- if and (kindIs "string" .Values.envoy.concurrency) (eq "" .Values.envoy.concurrency) }}
          {{/* envoy.concurrency = '', skip */}}
          {{- else }}
            - '--concurrency'
            - {{ include "envoy.get-concurrency" . | quote }}
          {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics-aggregator
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
          env:
            - name: METRICS_AGGREGATOR_PORT
              value: "{{ .Values.metrics.port }}"
            - name: METRICS_AGGREGATOR_SOURCES
              value: "http://localhost:{{ .Values.splitter.appPort }}/metrics,http://localhost:9901/stats/prometheus"
            - name: GOMAXPROCS
              value: "1"
          livenessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.metrics.port }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.metrics.port }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
        - name: {{ include "generic-chart.containerName" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          command:
            - /app
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PORT
              value: {{ .Values.splitter.appPort | quote }}
            - name: BASE_CTX_URL
              value: {{ .Values.splitter.ctxBaseUrl | quote }}
            - name: CTX_URL
              value: {{ .Values.splitter.ctxUrl | quote }}
            - name: CTX_TIMEOUT
              value: {{ .Values.splitter.ctxTimeout | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.splitter.logLevel | quote }}
            - name: SUBREQUEST_RETRY_N
              value: {{ .Values.splitter.subrequestRetryN | quote }}
            - name: READ_TIMEOUT
              value: {{ .Values.splitter.readTimeout | quote }}
            - name: WRITE_TIMEOUT
              value: {{ .Values.splitter.writeTimeout | quote }}
            - name: IDLE_TIMEOUT
              value: {{ .Values.splitter.idleTimeout | quote }}
            - name: GOMAXPROCS
              value: {{ .Values.splitter.goMaxProcs | quote }}
            - name: PROXY_TIMEOUT
              value: {{ .Values.splitter.proxyTimeout | quote }}
            - name: SUBREQUEST_TIMEOUT
              value: {{ .Values.splitter.subrequestTimeout | quote }}
            - name: STATISTIC_HOST
              value: {{ .Values.splitter.statHost | quote }}
            - name: STATISTIC_THREAD_POOL_SIZE
              value: {{ .Values.splitter.statThreadPoolSize | quote }}
            - name: STATISTIC_TYPE
              value: {{ .Values.splitter.statType | default 401 | quote }}
            {{- if .Values.attractor.enabled }}
            - name: ATTRACT_URL
              value: 127.0.0.1:9999
            - name: ATTRACT_TIMEOUT
              value: {{ .Values.attractor.timeout | quote }}
            {{- end }}
            {{- if .Values.oneToMany.enabled }}
            - name: ONE_TO_MANY_URL
              value: 127.0.0.1:9998
            - name: ONE_TO_MANY_TIMEOUT
              value: {{ .Values.oneToMany.timeout | quote }}
            {{- end }}
            {{- if .Values.passThrough.enabled }}
            - name: MOSES_URL
              value: '{{ .Values.passThrough.scheme }}://{{ coalesce .Values.passThrough.host .Values.oneToMany.host }}:{{ .Values.passThrough.port }}'
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.splitter.appPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 3
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          lifecycle:
            # wait for the endpoint removal process
            preStop:
              exec:
                command:
                  - sleep
                  - {{ .Values.preStopDelay | quote }}
      volumes:
        - name: envoy-config
          configMap:
            name: {{ include "generic-chart.fullname" . }}-configmap
{{- end }}{{- /* define "splitter.deployment" */}}
{{- template "generic-chart.merge" (list . "splitter.deployment" "generic-chart.deployment.tpl") }}
