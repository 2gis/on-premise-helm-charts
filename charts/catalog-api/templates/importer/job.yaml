apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "catalog.importer.name" . }}
  labels:
    {{- include "catalog.importer.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "catalog.importer.name" . }}
      labels:
        {{- include "catalog.importer.labels" . | nindent 8 }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      {{- if or .Values.importer.initialDelaySeconds .Values.importer.postgres.tls.enabled }}
      initContainers:
      {{- if .Values.importer.initialDelaySeconds }}
        - name: delay
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.importer.image.repository }}:{{ .Values.importer.image.tag }}
          command: [ "sh", "-c", "sleep {{ .Values.importer.initialDelaySeconds }}" ]
          resources:
            {{- toYaml .Values.importer.resources | nindent 12 }}
      {{- end }}
      {{- if .Values.importer.postgres.tls.enabled }}
        - name: copy-certs
          image: '{{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.importer.image.repository }}:{{ .Values.importer.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.importer.image.pullPolicy }}
          resources:
            {{- toYaml .Values.importer.resources | nindent 12 }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /tmp/certs/* /etc/2gis/secret/psql/
              chmod 600 /etc/2gis/secret/psql/client.key
          volumeMounts:
            - name: {{ include "catalog.importer.name-psql-raw" . | quote }}
              mountPath: /tmp/certs
            - name: {{ include "catalog.importer.name-psql" . | quote }}
              mountPath: /etc/2gis/secret/psql
      {{- end }}
      {{- end }}
      containers:
        - name: importer
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.importer.image.repository }}:{{ .Values.importer.image.tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command: [ "importer", "import" ]
          resources:
            {{- toYaml .Values.importer.resources | nindent 12 }}
          env:
            {{- include "catalog.env.importer" . | nindent 12 }}
            {{- if .Values.customCAs.bundle }}
            {{- include "catalog.env.custom.ca.path" . | nindent 12 }}
            {{- end }}
          {{- include "catalog.importer.validateStorage" . | nindent 10 }}
          {{- if or (or .Values.customCAs.bundle .Values.importer.postgres.tls.enabled) (or .Values.importer.persistentVolume.enabled .Values.importer.emptyDir.enabled) }}
          volumeMounts:
            {{- if .Values.importer.persistentVolume.enabled }}
            - name: {{ include "catalog.importer.name" . }}-pv
              mountPath: "/tmp"
            {{- else if .Values.importer.emptyDir.enabled }}
            - name: {{ include "catalog.importer.name" . }}-empty-dir
              mountPath: {{ .Values.importer.emptyDir.mountPath | default "/tmp" }}
            {{- end }}
            {{- if .Values.importer.postgres.tls.enabled }}
            - name: {{ printf "%s-psql" (include "catalog.importer.name" .) | quote }}
              mountPath: /etc/2gis/secret/psql
            {{- end }}
            {{- if .Values.customCAs.bundle }}
            {{- include "catalog.custom.ca.volumeMounts" . | nindent 12 }}
            {{- end }}
          {{- end }}
      {{- if or .Values.importer.persistentVolume.enabled .Values.customCAs.bundle .Values.importer.postgres.tls.enabled .Values.importer.emptyDir.enabled }}
      volumes:
      {{- if .Values.importer.persistentVolume.enabled }}
        - name: {{ include "catalog.importer.name" . }}-pv
          persistentVolumeClaim:
            claimName: {{ include "catalog.importer.name" . }}
      {{- else if .Values.importer.emptyDir.enabled }}
        - name: {{ include "catalog.importer.name" . }}-empty-dir
          {{- if .Values.importer.emptyDir.medium }}
          emptyDir:
            medium: {{ .Values.importer.emptyDir.medium }}
            sizeLimit: {{ required "A valid .Values.importer.emptyDir.sizeLimit entry required" .Values.importer.emptyDir.sizeLimit }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- end }}
      {{- if .Values.customCAs.bundle }}
        {{- include "catalog.custom.ca.jobs.volumes" . | nindent 8 }}
      {{- end }}
      {{- if .Values.importer.postgres.tls.enabled }}
        - name: {{ include "catalog.importer.name-psql-raw" . | quote }}
          secret:
            secretName: {{ include "catalog.importer.name-psql" . | quote }}
        - name: {{ include "catalog.importer.name-psql" . | quote }}
          emptyDir: {}
      {{- end }}
      {{- end }}
      {{- with .Values.importer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.importer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
