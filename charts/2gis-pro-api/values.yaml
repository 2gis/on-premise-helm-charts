---
# @section Docker Registry settings
# @param dgctlDockerRegistry Docker Registry endpoint where On-Premise services' images reside. Format: `host:port`.
dgctlDockerRegistry: ''

# @section Deployment Artifacts Storage settings
# @param dgctlStorage.host S3 endpoint. Format: `host:port`.
# @param dgctlStorage.bucket S3 bucket name.
# @param dgctlStorage.accessKey S3 access key for accessing the bucket.
# @param dgctlStorage.secretKey S3 secret key for accessing the bucket.
# @param dgctlStorage.manifest The path to the [manifest file](https://docs.2gis.com/en/on-premise/overview#nav-lvl2@paramCommon_deployment_steps). Format: `manifests/0000000000.json`.<br> This file contains the description of pieces of data that the service requires to operate.

dgctlStorage: &s3config
  host: ""
  bucket: ""
  accessKey: ""
  secretKey: ""
  manifest: manifests/latest.json

# @section 2GIS PRO API common settings
# @param appName Name of the service.
# @skip nameOverride
# @skip fullnameOverride
# @param replicaCount A replica count for the pod.
# @param revisionHistoryLimit Revision history limit (used for [rolling back](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) a deployment).
appName: "pro-api"
nameOverride: ""
fullnameOverride: ""

replicaCount: 2
revisionHistoryLimit: 3

# @param annotations Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param labels Kubernetes [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
# @param podAnnotations Kubernetes [pod annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param podLabels Kubernetes [pod labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
annotations: {}
labels: {}
podAnnotations: {}
podLabels: {}

# @param imagePullSecrets Kubernetes image pull secrets.
# @param affinity Kubernetes pod [affinity settings](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity).
# @param nodeSelector Kubernetes [node selectors](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector).
# @param tolerations Kubernetes [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) settings.
imagePullSecrets: []
affinity: {}
nodeSelector: {}
tolerations: []

# @param priorityClassName Kubernetes [priorityClassName](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/) settings.
priorityClassName: ""

# @param terminationGracePeriodSeconds Duration in seconds the PRO-API service pod needs to terminate gracefully.
terminationGracePeriodSeconds: 60

# @extra strategy **Service's update strategy settings**
# @skip strategy.type
# @extra strategy.rollingUpdate **Service's Rolling Update strategy settings**
# @param strategy.rollingUpdate.maxUnavailable Maximum number of pods that can be created over the desired number of pods when doing [rolling update](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment).
# @param strategy.rollingUpdate.maxSurge Maximum number of pods that can be unavailable during the [rolling update](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment) process.
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

# @extra service **Kubernetes [service settings](https://kubernetes.io/docs/concepts/services-networking/service/) to expose the service**
# @param service.port 2GIS PRO API service port.
# @param service.type Kubernetes [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
# @param service.annotations Kubernetes [service annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
# @param service.labels Kubernetes [service labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
service:
  port: 80
  type: ClusterIP
  annotations: {}
  labels: {}

# @extra resources **Kubernetes [resource management settings](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)**
# @param resources.requests.cpu A CPU request.
# @param resources.requests.memory A memory request.
# @param resources.limits.cpu A CPU limit.
# @param resources.limits.memory A memory limit.
resources:
  requests:
    cpu: 400m
    memory: 256M
  limits:
    cpu: 1
    memory: 1024M

# @extra vpa **Kubernetes [Vertical Pod Autoscaling](https://github.com/kubernetes/autoscaler/blob/master/vertical-pod-autoscaler/README.md) settings**
# @param vpa.enabled If VPA is enabled for the service.
# @param vpa.updateMode VPA [update mode](https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler#quick-start).
# @param vpa.minAllowed.cpu Lower limit for the number of CPUs to which the autoscaler can scale down.
# @param vpa.minAllowed.memory Lower limit for the RAM size to which the autoscaler can scale down.
# @param vpa.maxAllowed.cpu Upper limit for the number of CPUs to which the autoscaler can scale up.
# @param vpa.maxAllowed.memory Upper limit for the RAM size to which the autoscaler can scale up.
vpa:
  enabled: false
  updateMode: Auto
  minAllowed:
    cpu: 400m
    memory: 256M
  maxAllowed:
    cpu: 1
    memory: 1024M

# @extra image **Docker image settings**
# @param image.repository Docker Repository.
# @param image.tag Docker image tag
# @param image.pullPolicy Kubernetes pull policy for the service's Docker image.
image:
  repository: 2gis-on-premise/pro-api
  tag: "0.5.0"
  pullPolicy: IfNotPresent

# @section 2GIS PRO Storage configuration
# @skip s3.<<.host
# @skip s3.<<.bucket
# @skip s3.<<.accessKey
# @skip s3.<<.secretKey
# @skip s3.<<.manifest
# @param s3.layerDataBucket S3 bucket with prepared layer data.
# @param s3.userAssetsDataBucket S3 bucket with user-created assets, aggregations, and filters
s3:
  <<: *s3config
  layerDataBucket: ""
  userAssetsDataBucket: ""

# @section 2GIS PRO API configuration
# @param api.tempPath Path to directory used for temp data
# @param api.host pro-api host address
# @param api.allowAnyOrigin Cors policy: allow any origin to perform requests to pro-api service
# @skip api.diggerPassword
# @skip api.diggerUserName
# @skip api.logEsQueries
# @skip api.debug
# @skip api.env

# @extra postgres **PostgreSql settings**
# @param postgres.connectionString Connection string to the PostgreSql database. Format: `Server=SERVER_URL;Database=DB_NAME;UID=USER_NAME;Pwd={0};`
# @param postgres.password User password to connect to the PostgreSql database.

# @extra elastic **ElasticSearch settings**
# @param elastic.host ElasticSearch host address. Format: `https://{0}@HOST:PORT`
# @param elastic.credentials User name and password to connect to the ElasticSearch. Format: `USER_NAME:PASSWORD`

# @extra catalog **Catalog API settings**
# @param catalog.host Host for [Catalog API](https://docs.2gis.com/en/on-premise/search).
# @param catalog.key Access key to [Catalog API](https://docs.2gis.com/en/on-premise/search).

# @extra navi **Navigation API settings**
# @param navi.host Host for [Navigation API](https://docs.2gis.com/en/on-premise/search).
# @param navi.key Access key to [Navigation API](https://docs.2gis.com/en/on-premise/navigation/overview).
api:
  tempPath: '/tmp'
  host: ""
  diggerPassword: ""
  diggerUserName: ""
  allowAnyOrigin: false
  logEsQueries: false
  debug: false
  env: ""

postgres:
  connectionString: ""
  password: ""
elastic:
  host: ""
  credentials: ""
catalog:
  host: http://catalog.host
  key: ""
navi:
  host: http://navi-back.host
  key: ""

# @section 2GIS PRO API Job settings
# @param appImporterName Data Import job name.
# @param appUserDataImporterName User Data Import job name.
# @skip appDataPreparerName
appImporterName: "pro-importer"
appUserDataImporterName: "pro-userdata-importer"
appDataPreparerName: "pro-data-preparer"

# @extra importJob **Import job settings**
# @param importJob.schedule Import job start schedule
# @param importJob.backoffLimit The number of [retries](https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy) before considering a Job as failed.
# @param importJob.successfulJobsHistoryLimit How many completed jobs should be kept. See [docs](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#jobs-history-limits).
# @param importJob.repository Docker Repository Image.
# @param importJob.tag Docker image tag
# @param importJob.serviceAccount  Kubernetes service account
# @extra importJob.resources **Kubernetes [resource management settings](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)**
# @param importJob.resources.requests.cpu A CPU request.
# @param importJob.resources.requests.memory A memory request.
# @param importJob.resources.limits.cpu A CPU limit.
# @param importJob.resources.limits.memory A memory limit.
# @param importJob.maxParallelJobs How many import jobs can be run simultaneously
# @skip importJob.files
importJob:
  schedule: "0 18 * * *"
  backoffLimit: 2
  successfulJobsHistoryLimit: 3
  repository: 2gis-on-premise/pro-importer
  tag: "0.5.0"
  serviceAccount: "runner"
  resources:
    requests:
      cpu: 700m
      memory: 256M
    limits:
      cpu: 1000m
      memory: 1024M
  maxParallelJobs: 4
  files: ""

# @skip dataPrepareJob **Data prepare job settings**
# @skip dataPrepareJob.schedule
# @skip dataPrepareJob.backoffLimit
# @skip dataPrepareJob.successfulJobsHistoryLimit
# @skip dataPrepareJob.repository
# @skip dataPrepareJob.resources
# @skip dataPrepareJob.resources.requests.cpu
# @skip dataPrepareJob.resources.requests.memory
# @skip dataPrepareJob.tag
# @skip dataPrepareJob.resources.limits.cpu
# @skip dataPrepareJob.resources.limits.memory
# @skip dataPrepareJob.maxParallelJobs
dataPrepareJob:
  schedule: "0 16 * * 6"
  backoffLimit: 2
  successfulJobsHistoryLimit: 1
  repository: 2gis-on-premise/pro-importer
  tag: "0.5.0"
  resources:
    requests:
      cpu: 300m
      memory: 256M
    limits:
      cpu: 500m
      memory: 512M
  maxParallelJobs: 1
