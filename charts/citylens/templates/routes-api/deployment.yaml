apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "citylens.routes.api.name" . }}
  {{- with .Values.routes.api.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "citylens.routes.api.labels" . | nindent 4 }}
  {{- with .Values.routes.api.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.routes.api.replicaCount }}
  revisionHistoryLimit: {{ .Values.routes.api.revisionHistoryLimit }}
  {{- if .Values.routes.strategy }}
  strategy:
    {{- toYaml .Values.routes.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "citylens.routes.api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.routes.yaml") . | sha256sum }}
      {{- with .Values.routes.api.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "citylens.routes.api.labels" . | nindent 8 }}
      {{- with .Values.routes.api.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.routes.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.routes.api.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.routes.api.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.routes.api.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.routes.terminationGracePeriodSeconds }}
      volumes:
        - name: temp-volume
          emptyDir: { }
      containers:
        - name: {{ include "citylens.routes.api.name" . }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.routes.api.image.repository }}:{{ .Values.routes.api.image.tag }}
          imagePullPolicy: {{ .Values.routes.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.routes.api.tempPath }}"
              name: temp-volume
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          resources:
            {{- toYaml .Values.routes.api.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "sleep 5" ]
          env:
            - name: Common__TempPath
              value: {{ .Values.routes.api.tempPath | quote }}

            - name: Common__Logging__LogLevel
              value: "{{ .Values.routes.api.logging.level }}"
            - name: Common__Logging__ExtendedRestLogging
              value: "{{ .Values.routes.api.logging.extendedRestLogging }}"
            - name: Common__Logging__ExtendedSqlLogging
              value: "{{ .Values.routes.api.logging.extendedSqlLogging }}"

            - name: Postgres__ReadWrite__ConnectionString
              value: {{ include "routes-api.connectionString" . }}
            - name: Postgres__ReadWrite__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.api.name" . }}-secret

            - name: Postgres__ReadOnly__ConnectionString
              value: {{ include "routes-api.connectionString" . }}
            - name: Postgres__ReadOnly__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.api.name" . }}-secret

            - name: Hangfire__Postgres__ConnectionString
              value: {{ include "routes-hangfire.connectionString" . }}
            - name: Hangfire__Postgres__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.api.name" . }}-secret

            - name: S3__BucketPrefix
              value: {{ required "A valid .Values.s3.bucketPrefix entry required" $.Values.s3.bucketPrefix | quote }}
            - name: S3__LogsBucketPrefix
              value: {{ required "A valid .Values.s3.logsBucketPrefix entry required" $.Values.s3.logsBucketPrefix | quote }}
            - name: S3__AccessKey
              valueFrom:
                secretKeyRef:
                  key: s3AccessKey
                  name: {{ include "citylens.routes.api.name" . }}-secret
            - name: S3__SecretAccessKey
              valueFrom:
                secretKeyRef:
                  key: s3SecretAccessKey
                  name: {{ include "citylens.routes.api.name" . }}-secret
            - name: S3__Region
              value: {{ $.Values.s3.region | quote }}

            - name: Clients__Navigation__Enabled
              value: "true"
            - name: Clients__Navigation__Url
              value: "{{ required "A valid .Values.routes.navi.url entry required" $.Values.routes.navi.url }}"
            - name: Clients__Navigation__TimeoutSeconds
              value: {{ $.Values.routes.navi.timeout | quote }}
            - name: Clients__Navigation__ApiKey
              value: {{ $.Values.routes.navi.key | quote }}

            - name: Clients__Keys__Enabled
              value: "true"
            - name: Clients__Keys__Url
              value: {{ $.Values.routes.keys.url | quote }}
            - name: Clients__Keys__Brand
              value: {{ $.Values.routes.keys.brand | quote }}

            - name: Clients__ProClient__Enabled
              value: "true"
            - name: Clients__ProClient__Url
              value: {{ $.Values.pro.baseUrl | quote }}
            - name: Clients__ProClient__AuthorizationToken
              value: {{ $.Values.routes.pro.authorizationToken | quote }}

            - name: Clients__RealTimeData__Enabled
              value: "true"
            - name: Clients__RealTimeData__Url
              value: "{{ required "A valid .Values.routes.realtimeData.url entry required" $.Values.routes.realtimeData.url }}"

            - name: Features__AuthorizationEnabled
              value: {{ $.Values.routes.features.authorizationEnabled | quote }}
            - name: Features__OidcMobileAuthorizationEnabled
              value: "{{ $.Values.routes.features.oidcMobileAuthorizationEnabled }}"
            - name: Features__CoverageRatioEnabled
              value: {{ $.Values.routes.features.coverageRatioEnabled | quote }}

            - name: TasksAssetSettings__SystemAccessToken
              value: {{ $.Values.routes.tasksAssetSettings.systemAccessToken | quote }}
            - name: TasksAssetSettings__PlannedTasksAssetId
              value: {{ $.Values.routes.tasksAssetSettings.plannedTasksAssetId | quote }}
            - name: TasksAssetSettings__CompletedTasksAssetId
              value: "{{ $.Values.routes.tasksAssetSettings.completedTasksAssetId }}"
