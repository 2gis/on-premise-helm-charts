apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "citylens.routes.worker.name" . }}
  {{- with .Values.routes.worker.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "citylens.routes.worker.labels" . | nindent 4 }}
  {{- with .Values.routes.worker.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.routes.worker.replicaCount }}
  revisionHistoryLimit: {{ .Values.routes.worker.revisionHistoryLimit }}
  {{- if .Values.routes.strategy }}
  strategy:
    {{- toYaml .Values.routes.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "citylens.routes.worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.routes.yaml") . | sha256sum }}
      {{- with .Values.routes.worker.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "citylens.routes.worker.labels" . | nindent 8 }}
      {{- with .Values.routes.worker.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.routes.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.routes.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.routes.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.routes.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.routes.terminationGracePeriodSeconds }}
      volumes:
        - name: temp-volume
          emptyDir: { }
      containers:
        - name: {{ include "citylens.routes.worker.name" . }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.routes.worker.image.repository }}:{{ .Values.routes.worker.image.tag }}
          imagePullPolicy: {{ .Values.routes.worker.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.routes.worker.tempPath }}"
              name: temp-volume
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 20
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.routes.worker.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "sleep 5" ]
          env:
            - name: Common__TempPath
              value: "{{ .Values.routes.worker.tempPath }}"

            - name: Common__Logging__LogLevel
              value: "{{ .Values.routes.worker.logging.level }}"

            - name: RoutesSettings__RoutePointsMatchDistanceMeters
              value: "{{ .Values.routes.worker.routesSettings.routePointsMatchDistanceMeters }}"

            - name: PgSettings__Host
              value: "{{ required "A valid .Values.postgres.host entry required" $.Values.postgres.host }}"
            - name: PgSettings__Port
              value: "{{ required "A valid .Values.postgres.port entry required" $.Values.postgres.port }}"
            - name: PgSettings__UserName
              value: "{{ required "A valid .Values.postgres.username entry required" $.Values.postgres.username }}"
            - name: PgSettings__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.api.name" . }}-secret

            - name: PgSettings__Api__Database
              value: "{{ required "A valid .Values.routes.postgres.database entry required" $.Values.routes.postgres.database }}"
            - name: PgSettings__Api__Timeout
              value: "{{ $.Values.routes.postgres.timeout }}"
            - name: PgSettings__Api__CommandTimeout
              value: "{{ $.Values.routes.postgres.commandTimeout }}"
            - name: PgSettings__Api__MaxPoolSize
              value: "{{ $.Values.routes.postgres.maxPoolSize }}"
            - name: PgSettings__Api__Pooling
              value: "{{ $.Values.routes.postgres.pooling }}"

            - name: PgSettings__Hangfire__Database
              value: "{{ required "A valid .Values.routes.hangfire.postgres.database entry required" $.Values.routes.hangfire.postgres.database }}"
            - name: PgSettings__Hangfire__Timeout
              value: "{{ $.Values.routes.hangfire.postgres.timeout }}"
            - name: PgSettings__Hangfire__CommandTimeout
              value: "{{ $.Values.routes.hangfire.postgres.commandTimeout }}"
            - name: PgSettings__Hangfire__MaxPoolSize
              value: "{{ $.Values.routes.hangfire.postgres.maxPoolSize }}"
            - name: PgSettings__Hangfire__Pooling
              value: "{{ $.Values.routes.hangfire.postgres.pooling }}"

            - name: BusConfig__Broker
              value: "{{ .Values.kafka.bootstrapServer }}"
            - name: BusConfig__SecurityInformation__SaslUsername
              value: "{{ .Values.kafka.username }}"
            - name: BusConfig__SecurityInformation__SaslPassword
              valueFrom:
                secretKeyRef:
                  key: busConfigSaslPassword
                  name: {{ include "citylens.routes.api.name" . }}-secret
            - name: BusConfig__SecurityInformation__SaslMechanism
              value: "{{ .Values.routes.worker.busConfig.securityInformation.saslMechanism }}"
            - name: BusConfig__SecurityInformation__SecurityProtocol
              value: "{{ .Values.routes.worker.busConfig.securityInformation.securityProtocol }}"

            - name: BusConfig__Consumers__AppEvents__Topic
              value: "{{ .Values.kafka.topics.tracks }}"
            - name: BusConfig__Consumers__AppEvents__GroupId
              value: "{{ required "A valid .Values.routes.worker.busConfig.consumers.appEvents.groupId entry required" $.Values.routes.worker.busConfig.consumers.appEvents.groupId }}"
            - name: BusConfig__Consumers__AppEvents__BufferSize
              value: "{{ .Values.routes.worker.busConfig.consumers.appEvents.bufferSize }}"
            - name: BusConfig__Consumers__AppEvents__WorkersCount
              value: "{{ .Values.routes.worker.busConfig.consumers.appEvents.workersCount }}"

            - name: TasksAssetSettings__SystemAccessToken
              value: "{{ $.Values.routes.tasksAssetSettings.systemAccessToken }}"
            - name: TasksAssetSettings__PlannedTasksAssetId
              value: "{{ $.Values.routes.tasksAssetSettings.plannedTasksAssetId }}"
            - name: TasksAssetSettings__CompletedTasksAssetId
              value: "{{ $.Values.routes.tasksAssetSettings.completedTasksAssetId }}"

            - name: Clients__ProClient__Enabled
              value: "true"
            - name: Clients__ProClient__Url
              value: "{{ $.Values.pro.baseUrl }}"
            - name: Clients__ProClient__AuthorizationToken
              value: "{{ $.Values.routes.pro.authorizationToken }}"
            - name: Clients__ProClient__MainTerritoryId
              value: "{{ $.Values.routes.pro.mainTerritoryId }}"

            - name: Clients__Navigation__Enabled
              value: "true"
            - name: Clients__Navigation__Url
              value: "{{ required "A valid .Values.routes.navi.url entry required" $.Values.routes.navi.url }}"
            - name: Clients__Navigation__TimeoutSeconds
              value: "{{ $.Values.routes.navi.timeout }}"
            - name: Clients__Navigation__ApiKey
              value: "{{ $.Values.routes.navi.key }}"

            - name: Features__CoverageRatioEnabled
              value: "{{ $.Values.routes.features.coverageRatioEnabled }}"
            - name: Features__TasksAssetEnabled
              value: "{{ $.Values.routes.features.tasksAssetEnabled }}"
