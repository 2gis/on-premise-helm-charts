{{- if .Values.routes.migration.enabled }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "citylens.routes.migration.name" . }}-job
  labels:
    {{- include "citylens.routes.migration.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-5"
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "citylens.routes.migration.name" . }}
      labels:
        {{- include "citylens.routes.migration.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      {{- with .Values.routes.api.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: api-migrate
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.routes.api.image.repository }}:{{ .Values.routes.api.image.tag }}
          imagePullPolicy: {{ .Values.routes.api.image.pullPolicy }}
          args: [ "migrate" ]
          resources:
            {{- toYaml .Values.routes.api.resources | nindent 12 }}
          env:
            - name: PgSettings__Host
              value: {{ required "A valid .Values.postgres.host entry required" $.Values.postgres.host | quote }}
            - name: PgSettings__Port
              value: {{ required "A valid .Values.postgres.port entry required" $.Values.postgres.port | quote }}
            - name: PgSettings__UserName
              value: {{ required "A valid .Values.postgres.username entry required" $.Values.postgres.username | quote }}
            - name: PgSettings__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.migration.name" . }}-secret

            - name: PgSettings__Api__Database
              value: {{ required "A valid .Values.routes.postgres.database entry required" $.Values.routes.postgres.database | quote }}
            - name: PgSettings__Api__Timeout
              value: {{ $.Values.routes.postgres.timeout | quote }}
            - name: PgSettings__Api__CommandTimeout
              value: {{ $.Values.routes.postgres.commandTimeout | quote }}
            - name: PgSettings__Api__MaxPoolSize
              value: {{ $.Values.routes.postgres.maxPoolSize | quote }}

            - name: PgSettings__Hangfire__Database
              value: {{ required "A valid .Values.routes.hangfire.postgres.database entry required" $.Values.routes.hangfire.postgres.database | quote }}
            - name: PgSettings__Hangfire__Timeout
              value: {{ $.Values.routes.hangfire.postgres.timeout | quote }}
            - name: PgSettings__Hangfire__CommandTimeout
              value: {{ $.Values.routes.hangfire.postgres.commandTimeout | quote }}
            - name: PgSettings__Hangfire__MaxPoolSize
              value: {{ $.Values.routes.hangfire.postgres.maxPoolSize | quote }}
            - name: PgSettings__Hangfire__Pooling
              value: {{ $.Values.routes.hangfire.postgres.pooling | quote }}

        - name: worker-migrate
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.routes.worker.image.repository }}:{{ .Values.routes.worker.image.tag }}
          imagePullPolicy: {{ .Values.routes.worker.image.pullPolicy }}
          args: [ "migrate" ]
          resources:
            {{- toYaml .Values.routes.worker.resources | nindent 12 }}
          env:
            - name: PgSettings__Host
              value: {{ required "A valid .Values.postgres.host entry required" $.Values.postgres.host | quote }}
            - name: PgSettings__Port
              value: {{ required "A valid .Values.postgres.port entry required" $.Values.postgres.port | quote }}
            - name: PgSettings__UserName
              value: {{ required "A valid .Values.postgres.username entry required" $.Values.postgres.username | quote }}
            - name: PgSettings__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.migration.name" . }}-secret

            - name: PgSettings__Api__Database
              value: {{ required "A valid .Values.routes.postgres.database entry required" $.Values.routes.postgres.database | quote }}
            - name: PgSettings__Api__Timeout
              value: {{ $.Values.routes.postgres.timeout | quote }}
            - name: PgSettings__Api__CommandTimeout
              value: {{ $.Values.routes.postgres.commandTimeout | quote }}
            - name: PgSettings__Api__MaxPoolSize
              value: {{ $.Values.routes.postgres.maxPoolSize | quote }}
            - name: PgSettings__Api__Pooling
              value: {{ $.Values.routes.postgres.pooling | quote }}

            - name: PgSettings__Hangfire__Database
              value: {{ required "A valid .Values.routes.hangfire.postgres.database entry required" $.Values.routes.hangfire.postgres.database | quote }}
            - name: PgSettings__Hangfire__Timeout
              value: {{ $.Values.routes.hangfire.postgres.timeout | quote }}
            - name: PgSettings__Hangfire__CommandTimeout
              value: {{ $.Values.routes.hangfire.postgres.commandTimeout | quote }}
            - name: PgSettings__Hangfire__MaxPoolSize
              value: {{ $.Values.routes.hangfire.postgres.maxPoolSize | quote }}
            - name: PgSettings__Hangfire__Pooling
              value: {{ $.Values.routes.hangfire.postgres.pooling | quote }}

            - name: BusConfig__Broker
              value: {{ .Values.kafka.bootstrapServer | quote }}
            - name: BusConfig__SecurityInformation__SaslUsername
              value: {{ $.Values.kafka.username | quote }}
            - name: BusConfig__SecurityInformation__SaslPassword
              valueFrom:
                secretKeyRef:
                  key: busConfigSaslPassword
                  name: {{ include "citylens.routes.migration.name" . }}-secret
            - name: BusConfig__SecurityInformation__SaslMechanism
              value: {{ .Values.routes.worker.busConfig.securityInformation.saslMechanism | quote }}
            - name: BusConfig__SecurityInformation__SecurityProtocol
              value: {{ .Values.routes.worker.busConfig.securityInformation.securityProtocol | quote }}

            - name: BusConfig__Consumers__AppEvents__Topic
              value: {{ .Values.kafka.topics.tracks | quote }}
            - name: BusConfig__Consumers__AppEvents__GroupId
              value: {{ required "A valid .Values.routes.worker.busConfig.consumers.appEvents.groupId entry required" $.Values.routes.worker.busConfig.consumers.appEvents.groupId | quote }}
            - name: BusConfig__Consumers__AppEvents__BufferSize
              value: {{ $.Values.routes.worker.busConfig.consumers.appEvents.bufferSize | quote }}
            - name: BusConfig__Consumers__AppEvents__WorkersCount
              value: {{ $.Values.routes.worker.busConfig.consumers.appEvents.workersCount | quote }}

        - name: realtime-data-api-migrate
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.routes.realtimeDataApi.image.repository }}:{{ .Values.routes.realtimeDataApi.image.tag }}
          imagePullPolicy: {{ .Values.routes.realtimeDataApi.image.pullPolicy }}
          args: [ "migrate" ]
          resources:
            {{- toYaml .Values.routes.realtimeDataApi.resources | nindent 12 }}
          env:
            - name: PgSettings__Host
              value: {{ required "A valid .Values.postgres.host entry required" $.Values.postgres.host | quote }}
            - name: PgSettings__Port
              value: {{ required "A valid .Values.postgres.port entry required" $.Values.postgres.port | quote }}
            - name: PgSettings__UserName
              value: {{ required "A valid .Values.postgres.username entry required" $.Values.postgres.username | quote }}
            - name: PgSettings__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "citylens.routes.migration.name" . }}-secret

            - name: PgSettings__Api__Database
              value: {{ required "A valid .Values.routes.realtimeData.postgres.database entry required" $.Values.routes.realtimeDataApi.postgres.database | quote }}
            - name: PgSettings__Api__Timeout
              value: {{ $.Values.routes.realtimeDataApi.postgres.timeout | quote }}
            - name: PgSettings__Api__CommandTimeout
              value: {{ $.Values.routes.realtimeDataApi.postgres.commandTimeout | quote }}
            - name: PgSettings__Api__MaxPoolSize
              value: {{ $.Values.routes.realtimeDataApi.postgres.maxPoolSize | quote }}
            - name: PgSettings__Api__Pooling
              value: {{ $.Values.routes.realtimeDataApi.postgres.pooling | quote }}

            - name: PgSettings__Hangfire__Database
              value: {{ required "A valid .Values.routes.realtimeData.postgres.database entry required" $.Values.routes.realtimeDataApi.postgres.database | quote }}
            - name: PgSettings__Hangfire__Timeout
              value: {{ $.Values.routes.realtimeDataApi.postgres.timeout | quote }}
            - name: PgSettings__Hangfire__CommandTimeout
              value: {{ $.Values.routes.realtimeDataApi.postgres.commandTimeout | quote }}
            - name: PgSettings__Hangfire__MaxPoolSize
              value: {{ $.Values.routes.realtimeDataApi.postgres.maxPoolSize | quote }}
            - name: PgSettings__Hangfire__Pooling
              value: {{ $.Values.routes.realtimeDataApi.postgres.pooling | quote }}

{{- end }}
