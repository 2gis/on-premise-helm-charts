---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "navi-async-matrix.fullname" . }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "navi-async-matrix.labels" . | nindent 4 }}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "navi-async-matrix.fullname" . }}
  {{- if .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "navi-async-matrix.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/port: {{ .Values.dm.port | quote }}
        {{- if .Values.prometheusEnabled }}
        prometheus.io/scrape: "true"
        {{- end }}
        checksum/secret: {{ (include (print $.Template.BasePath "/secret.yaml") . | fromYaml).data | toYaml | sha256sum }}
        {{- if .Values.customCAs.bundle }}
        checksum/custom-ca: {{ (include (print $.Template.BasePath "/configmap-ca.yaml") . | fromYaml).data | toYaml | sha256sum }}
        {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "navi-async-matrix.labels" . | nindent 8 }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "navi-async-matrix.serviceAccountName" . }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
        - name: {{ printf "%s-configmap" (include "navi-async-matrix.fullname" .) | quote }}
          configMap:
            name: {{ printf "%s-configmap" (include "navi-async-matrix.fullname" .) | quote }}
            defaultMode: 0444
      {{- $kafkaVolumeMounted := (
              .Values.kafka.fileProperties |
              or (.Values.kafka.consumerOverrides).fileProperties |
              or (.Values.kafka.producerOverrides).fileProperties
            ) }}
      {{- if $kafkaVolumeMounted }}
        - name: {{ printf "%s-consumer" (include "navi-async-matrix.fullname" .) | quote }}
          secret:
            secretName: {{ printf "%s-consumer" (include "navi-async-matrix.fullname" .) | quote }}
            defaultMode: 0444
        - name: {{ printf "%s-producer" (include "navi-async-matrix.fullname" .) | quote }}
          secret:
            secretName: {{ printf "%s-producer" (include "navi-async-matrix.fullname" .) | quote }}
            defaultMode: 0444
      {{- end }}
      {{- if .Values.db.tls.enabled }}
        - name: {{ include "navi-async-matrix.fullname-psql-raw" . | quote }}
          secret:
            secretName: {{ include "navi-async-matrix.fullname-psql" . | quote }}
            defaultMode: 0444
        - name: {{ include "navi-async-matrix.fullname-psql" . | quote }}
          emptyDir: {}
      {{- end }}
      {{- if .Values.customCAs.bundle }}
        - name: {{ include "navi-async-matrix.fullname" . }}-ca
          configMap:
            name: {{ include "navi-async-matrix.fullname" . }}-ca
            defaultMode: 0444
      {{- end }}
      initContainers:
        {{- if .Values.db.tls.enabled }}
        - name: copy-certs
          image: '{{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /tmp/certs/* /etc/2gis/secret/psql/
              chmod 600 /etc/2gis/secret/psql/client.key
          volumeMounts:
            - name: {{ include "navi-async-matrix.fullname-psql-raw" . | quote }}
              mountPath: /tmp/certs
              readOnly: true
            - name: {{ include "navi-async-matrix.fullname-psql" . | quote }}
              mountPath: /etc/2gis/secret/psql
              readOnly: true
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: '{{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.dm.port | int }}
              protocol: TCP
          livenessProbe: &healthProbe
            httpGet:
              path: /healthcheck
              port: http
            failureThreshold: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            <<: *healthProbe
            failureThreshold: 3
          startupProbe:
            <<: *healthProbe
            failureThreshold: 60
          volumeMounts:
          {{- if $kafkaVolumeMounted }}
          - name: {{ printf "%s-consumer" (include "navi-async-matrix.fullname" .) | quote }}
            mountPath: /etc/2gis/secret/consumer/
            readOnly: true
          - name: {{ printf "%s-producer" (include "navi-async-matrix.fullname" .) | quote }}
            mountPath: /etc/2gis/secret/producer/
            readOnly: true
          {{- end }}
          {{- if .Values.db.tls.enabled }}
          - name: {{ printf "%s-psql" (include "navi-async-matrix.fullname" .) | quote }}
            mountPath: /etc/2gis/secret/psql
            readOnly: true
          {{- end }}
          {{- if .Values.customCAs.bundle }}
          - name: {{ include "navi-async-matrix.fullname" . }}-ca
            mountPath: {{ include "custom.ca.mountPath" . }}/custom-ca.crt
            subPath: custom-ca.crt
            readOnly: true
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "navi-async-matrix.fullname" . | quote }}
          env:
            - name: DM_ASYNC_SERVICE_HOST
              value: {{ .Values.dm.host | quote }}
            - name: DM_ASYNC_SERVICE_PORT
              value: {{ .Values.dm.port | quote }}
            - name: CONFIG_TYPE
              value: {{ .Values.dm.configType | quote }}
            - name: DM_ASYNC_SERVICE_CITIES_SETTING__LINK_TO_CITIES_FILE
              value: {{ required "A valid .Values.dm.citiesUrl entry required" .Values.dm.citiesUrl | quote }}
            - name: DM_ASYNC_SERVICE_CITIES_SETTING__CITIES_INFO_UPDATE_PERIOD
              value: {{ .Values.dm.citiesUpdatePeriod | quote }}
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_USE_MINIO
              value: 'true'
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_STORAGE_CONNECTION__AWS_ACCESS_KEY_ID
              value: {{ required "A valid .Values.s3.accessKey entry required" .Values.s3.accessKey | quote }}
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_STORAGE_CONNECTION__S3_ENDPOINT_URL
              value: {{ required "A valid .Values.s3.host entry required" .Values.s3.host | quote }}
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_STORAGE_CONNECTION__S3_BUCKET
              value: {{ required "A valid .Values.s3.bucket entry required" .Values.s3.bucket | quote }}
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_STORAGE_CONNECTION__REGION_NAME
              value: {{ .Values.s3.region | quote }}
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_STORAGE_CONNECTION__EXPIRATION_IN_DAYS
              value: {{ .Values.s3.expirationDays | quote }}
            - name: DM_ASYNC_SERVICE_LOGGER_SETTING__LEVEL
              value: {{ .Values.dm.logLevel | quote }}
            {{- if .Values.s3.publicNetloc }}
            # DM_ASYNC_SERVICE_STORAGE_SETTING__S3_PUBLIC_NETLOC for < 1.11.0
            # DM_ASYNC_SERVICE_STORAGE_SETTING__S3_PUBLIC_NETLOC_URL for >= 1.11.0
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_PUBLIC_NETLOC
              value: {{ regexReplaceAllLiteral "^https?://" .Values.s3.publicNetloc "" | quote }}
              {{- if not (regexMatch "^https?://" .Values.s3.publicNetloc) }}
                {{- fail "s3.publicNetLoc must start with the scheme: `<scheme>://<netloc>[/]`" }}
              {{- end }}
            - name: DM_ASYNC_SERVICE_STORAGE_SETTING__S3_PUBLIC_NETLOC_URL
              value: {{ .Values.s3.publicNetloc | quote }}
            {{- end }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_CANCEL_TOPIC
              value: {{ required "A valid kafka.cancelTopic entry required" .Values.kafka.cancelTopic | quote }}
            - name: DM_ASYNC_SERVICE_MERGER_TOPIC_RULES
              value: {{ include "navi-async-matrix.mergerTopicRules" $ | squote }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_CONFIG__GROUP_ID
              value: {{ .Values.kafka.groupId | quote }}
            - name: DM_ASYNC_SERVICE_TOPIC_RULES
              {{- /* topicRules is a structure, hence mustToJson */}}
              value: {{ .Values.kafka.taskTopicRules | mustToJson | quote }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_ATTRACT_TOPIC
              value: {{ required "A valid kafka.attractTopic entry required" .Values.kafka.attractTopic | quote }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_ONE_TO_MANY_TOPIC
              value: {{ required "A valid kafka.oneToManyTopic entry required" .Values.kafka.oneToManyTopic | quote }}
            - name: DM_ASYNC_SERVICE_ATTRACT_TOPIC_RULES
              value: {{ required "A valid kafka.attractTopicRules entry required" .Values.kafka.attractTopicRules | mustToJson | quote }}
            {{- if .Values.kafka.vrpStatusTopic }}
            - name: DM_ASYNC_SERVICE_SUBSCRIBER_TOPIC
              value: {{ .Values.kafka.vrpStatusTopic | quote }}
            {{- end }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_ARCHIVE_RESPONSE_TOPIC
              value: {{ required "A valid kafka.mergerStatusTopic entry required" .Values.kafka.mergerStatusTopic | quote }}
            - name: DM_ASYNC_SERVICE_ARCHIVER_K8S_SETTING__CONFIG_TYPE
              value: default
            - name: DM_ASYNC_SERVICE_TASK_SPLIT_SIZE
              value: {{ .Values.dm.taskSplitSize | quote }}
            - name: DM_ASYNC_SERVICE_COMPOSITE_TASK_TIMEOUT_IN_SECONDS
              value: {{ .Values.dm.compositeTaskTimeoutSec | quote }}
            {{- if .Values.multiDc.enabled }}
            - name: DM_ASYNC_SERVICE_APP__LOCATION
              value: {{ .Values.multiDc.location | quote }}
            - name: DM_ASYNC_SERVICE_REDIRECT_HEADER
              value: {{ .Values.multiDc.redirectHeader | default "" | quote }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_SYNC_ATTRACT_TOPIC
              value: {{ required "A valid multiDc.secondaryTopics.attractTopic entry required" .Values.multiDc.secondaryTopics.attractTopic | quote }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_SYNC_ONE_TO_MANY_TOPIC
              value: {{ required "A valid multiDc.secondaryTopics.oneToManyTopic entry required" .Values.multiDc.secondaryTopics.oneToManyTopic | quote }}
            - name: DM_ASYNC_SERVICE_KAFKA_CONSUMER_SETTING__KAFKA_CONSUMER_SYNC_ARCHIVE_RESPONSE_TOPIC
              value: {{ required "A valid multiDc.secondaryTopics.mergerStatusTopic entry required" .Values.multiDc.secondaryTopics.mergerStatusTopic | quote }}
            {{- end }}{{- /* .Values.kafka.secondaryTopics */}}
            - name: DM_ASYNC_SERVICE_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DM_ASYNC_SERVICE_KMS__URL
              value: {{ .Values.keys.url | quote }}
            {{- if .Values.bss.enabled }}
            - name: DM_ASYNC_SERVICE_BSS__URL
              value: {{ .Values.bss.url | quote }}
            - name: DM_ASYNC_SERVICE_BSS__VERSION
              value: {{ .Values.bss.version | quote }}
            {{- end }}
            {{- range $kafkaRole, $overridesProperty := (dict
                  "PRODUCER" "producerOverrides"
                  "CONSUMER" "consumerOverrides"
                ) -}}
            {{- $kafkaPropertyEnv := print "DM_ASYNC_SERVICE_KAFKA_" $kafkaRole "_SETTING__KAFKA_" $kafkaRole "_CONFIG__" -}}
            {{- $kafkaPropertiesEnv := include "navi-async-matrix.kafkaPropertiesEnv" (dict
                  "kafka" $.Values.kafka
                  "overrides" ($overridesProperty | get $.Values.kafka)
                  "secretname" (print
                      (include "navi-async-matrix.fullname" $)
                      "-"
                      (lower $kafkaRole)
                    )
                  "mountpoint" (print "/etc/2gis/secret/" (lower $kafkaRole))
                  "prefix" $kafkaPropertyEnv
                ) | fromYaml }}
            {{- get $kafkaPropertiesEnv "ret" | toYaml | nindent 12 }}
            {{- end }}{{- /* range */}}
            # sensitive data
            - name: DM_ASYNC_SERVICE_DB_SCHEMA
              value: {{ .Values.db.schema | quote }}
            {{- if .Values.db.expirationSec }}
            - name: DM_ASYNC_SERVICE_DB_EXPIRATION_IN_SEC
              value: {{ .Values.db.expirationSec | quote }}
            - name: DM_ASYNC_SERVICE_DB_EXPIRATION_CHECK_PERIOD
              value: {{ .Values.db.expirationPeriodSec | quote }}
            {{- end }}
            {{- if .Values.customCAs.bundle }}
            - name: SSL_CERT_FILE
              value: {{ include "custom.ca.mountPath" . }}/custom-ca.crt
            {{- end }}
