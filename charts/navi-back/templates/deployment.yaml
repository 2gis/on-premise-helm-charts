apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "generic-chart.fullname" . }}
  labels:
    {{- include "generic-chart.labels" . | nindent 4 }}
    rule: {{ .Values.naviback.app_rule | default "" | quote  }}
    navigroup: {{ .Values.navigroup | default "" | quote }}
    {{- if .Values.dataGroup.enabled }}
    dataGroupTimestamp: {{ .Values.dataGroup.timestamp | int | quote }}
    dataGroupPrefix: {{ .Values.dataGroup.prefix | quote }}
    {{- end }}{{- /* dataGroup.enabled */}}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- if .Values.strategy }}
  strategy:
    {{- include "tplvalues.render" ( dict "value" .Values.strategy "context" $) | nindent 6 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "generic-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ (include (print $.Template.BasePath "/configmap.yaml") . | fromYaml).data | toYaml | sha256sum }}
        checksum/secret: {{ (include (print $.Template.BasePath "/secret.yaml") . | fromYaml).data | toYaml | sha256sum }}
        {{- if .Values.customCAs.bundle }}
        checksum/custom-ca: {{ (include (print $.Template.BasePath "/configmap-ca.yaml") . | fromYaml).data | toYaml | sha256sum }}
        {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "generic-chart.selectorLabels" . | nindent 8 }}
        navigroup: {{ .Values.navigroup | default "" | quote }}
        {{- if .Values.dataGroup.enabled }}
        dataGroupTimestamp: {{ .Values.dataGroup.timestamp | int | quote }}
        dataGroupPrefix: {{ .Values.dataGroup.prefix | quote }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "generic-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      - name: {{ include "generic-chart.fullname" . }}-configmap
        configMap:
          name: {{ include "generic-chart.fullname" . }}-configmap
      {{- if .Values.customCAs.bundle }}
      - name: {{ include "generic-chart.fullname" . }}-configmap-ca
        configMap:
          name: {{ include "generic-chart.fullname" . }}-configmap-ca
      {{- end }}
      {{- if .Values.kafka.fileProperties }}
      - name: {{ include "generic-chart.fullname" . }}-secret
        secret:
          secretName: {{ include "generic-chart.fullname" . }}-secret
      {{- end }}
      {{- range $section := list "routesharing" "trafficLights" "roadLocks" }}
      {{- with $ }}
      {{- if $section | get .Values | dig "kafka" "fileProperties" (dict) }}
      - name: {{ include "generic-chart.fullname" . }}-{{ $section }}-secret
        secret:
          secretName: {{ include "generic-chart.fullname" . }}-{{ $section }}-secret
      {{- end }}
      {{- end }}{{- /* with $ */}}
      {{- end }}{{- /* range $section */}}
      {{- if .Values.naviback.sentry.enabled }}
      - name: sentry-volume
        emptyDir: {}
      {{- end }}
      {{- if .Values.naviback.hierarchies.enabled }}
      - name: hierarchies-volume
        {{- if .Values.naviback.hierarchies.volume }}
        {{- toYaml .Values.naviback.hierarchies.volume | nindent 8 }}
        {{- else }}
        emptyDir: {}
        {{- end }}{{- /* if .Values.naviback.hierarchies.volume */}}
      {{- end }}
      {{- if .Values.extraVolumes }}
      {{- include "tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 6 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- include "tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.transmitter.enabled }}
{{- /* generic-chart.containerName redefined in _helpers.tpl */}}
        - name: {{ include "generic-chart.containerName" . }}-envoy
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}
          imagePullPolicy: {{ .Values.envoy.image.pullPolicy }}
          args:
            - -c
            - /etc/envoy/envoy.yaml
          {{- if and (kindIs "string" .Values.envoy.concurrency) (eq "" .Values.envoy.concurrency) }}
          {{/* envoy.concurrency = '', skip */}}
          {{- else }}
            - "--concurrency"
            - {{ include "envoy.get-concurrency" . | quote }}
          {{- end }}
          volumeMounts:
            - name: {{ include "generic-chart.fullname" . }}-configmap
              mountPath: /etc/envoy/envoy.yaml
              subPath: envoy.yaml
            {{- if .Values.customCAs.bundle }}
            - name: {{ include "generic-chart.fullname" . }}-configmap-ca
              mountPath: {{ include "custom.ca.mountPath" . }}/custom-ca.crt
              subPath: custom-ca.crt
            {{- end }}
          {{- if .Values.customCAs.bundle }}
          env:
            - name: SSL_CERT_FILE
              value: {{ include "custom.ca.mountPath" . }}/custom-ca.crt
          {{- end }}
          {{- if (.Values.envoy).resources }}
          resources: {{- toYaml .Values.envoy.resources | nindent 12 }}
          {{- end }}
          lifecycle:
            # wait for the main container to shutdown
            preStop:
              exec:
                command: ["/bin/bash", "-c", "while cat < /dev/tcp/127.0.0.1/{{ .Values.naviback.appPort }} ; do sleep 5 ; done"]
          startupProbe:
            httpGet:
              path: /ready
              port: admin
            periodSeconds: 5
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /ready
              port: admin
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /ready
              port: admin
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          ports:
            - name: admin
              containerPort: 9901
              protocol: TCP
        {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics-aggregator
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
          env:
            - name: METRICS_AGGREGATOR_PORT
              value: "{{ .Values.metrics.port }}"
            - name: METRICS_AGGREGATOR_SOURCES
              value: "http://localhost:{{ .Values.naviback.appPort }}/metrics,http://localhost:9901/stats/prometheus"
            - name: GOMAXPROCS
              value: "1"
          livenessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.metrics.port }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.metrics.port }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
{{- /* generic-chart.containerName redefined in _helpers.tpl */}}
        - name: {{ include "generic-chart.containerName" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command:
            {{- include "tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- else }}
          command: [ "/usr/sbin/2gis/mosesd/tini", "--" ]
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- include "tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- else }}
          args:
          - /usr/sbin/2gis/mosesd/mosesd
          - --config
          - /etc/2gis/mosesd/navi-back.conf
          {{- end }}
          volumeMounts:
            - name: {{ include "generic-chart.fullname" . }}-configmap
              mountPath: /etc/2gis/mosesd/navi-back.conf
              subPath: navi-back.conf
            - name: {{ include "generic-chart.fullname" . }}-configmap
              mountPath: /etc/2gis/mosesd/rules.conf
              subPath: rules.conf
            {{- if .Values.kafka.fileProperties }}
            - name: {{ include "generic-chart.fullname" . }}-secret
              mountPath: /etc/2gis/mosesd/secret/
            {{- end }}
            {{- range $section := list "routesharing" "trafficLights" "roadLocks" }}
            {{- with $ }}
            {{- if $section | get .Values | dig "kafka" "fileProperties" (dict) }}
            - name: {{ include "generic-chart.fullname" . }}-{{ $section }}-secret
              mountPath: /etc/2gis/mosesd/secret-{{ $section }}/
            {{- end }}
            {{- end }}{{- /* with $ */}}
            {{- end }}{{- /* range $section */}}
            {{- if .Values.naviback.sentry.enabled }}
            - name: sentry-volume
              mountPath: {{ .Values.naviback.sentry.reportPath | default "/tmp/sentry" | quote }}
            {{- end }}
            {{- if .Values.naviback.hierarchies.enabled }}
            - name: hierarchies-volume
              mountPath: "/tmp/hierarchies"
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
            {{- if .Values.customCAs.bundle }}
            - name: {{ include "generic-chart.fullname" . }}-configmap-ca
              mountPath: {{ include "custom.ca.mountPath" . }}/custom-ca.crt
              subPath: custom-ca.crt
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.naviback.appPort }}
              protocol: TCP
            {{- if .Values.naviback.grpcPort }}
            - name: grpc
              containerPort: {{ .Values.naviback.grpcPort }}
              protocol: TCP
            {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe:
            {{- include "tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /successfulwork
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe:
            {{- include "tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /heartbeat
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe:
            {{- include "tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /successfulwork
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: RULE
              value: {{ .Values.naviback.app_rule | default "" | quote  }}
            - name: PROJECT
              value: {{ .Values.app_project | default "" | quote }}
          {{- if .Values.customCAs.bundle }}
            - name: SSL_CERT_FILE
              value: {{ include "custom.ca.mountPath" . }}/custom-ca.crt
          {{- end }}
            - name: TZ
              value: {{ .Values.timezone | quote }}
          lifecycle:
            # wait for the endpoint removal process
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep {{ .Values.preStopDelay | default 5 | int }}"]
        {{- if .Values.sidecars }}
        {{- include "tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 60 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        {{- include "tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
