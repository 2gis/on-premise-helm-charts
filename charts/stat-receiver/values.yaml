# @section Docker Registry settings

# @param dgctlDockerRegistry Docker Registry endpoint where On-Premise services' images reside. Format: `host:port`.
# @param imagePullSecrets Kubernetes image pull secrets.

dgctlDockerRegistry: ''
imagePullSecrets: []

# @section API service settings

api:

  # @extra api **Common settings**
  # @param api.replicas A replica count for the pod.
  # @param api.revisionHistoryLimit Revision history limit (used for [rolling back](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) a deployment).
  # @param api.jvmXmx Memory allocation options for JVM.

  replicas: 1
  revisionHistoryLimit: 3
  jvmXmx: -Xmx1500m

  # @extra api.image **Deployment settings**
  # @param api.image.repository Repository
  # @param api.image.tag Tag
  # @param api.image.pullPolicy Pull Policy

  image:
    repository: 2gis-on-premise/stat-receiver-api
    tag: 1.11.1
    pullPolicy: IfNotPresent


  # @extra api.service **Service settings**
  # @param api.service.type Kubernetes [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
  # @param api.service.port Service port.
  # @param api.service.targetPort Port inside the container.

  service:
    type: ClusterIP
    port: 80
    targetPort: 8080

  # @extra api.resources **Limits for the API service**
  # @param api.resources.requests.cpu A CPU request.
  # @param api.resources.requests.memory A memory request.
  # @param api.resources.limits.cpu A CPU limit.
  # @param api.resources.limits.memory A memory limit.

  resources:
    requests:
      cpu: 0.5
      memory: 1500Mi
    limits:
      cpu: 1
      memory: 1500Mi


# @section Streams service settings

streams:

  # @extra streams **Common settings**
  # @param streams.replicas A replica count for the pod.
  # @param streams.revisionHistoryLimit Revision history limit (used for [rolling back](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) a deployment).
  # @param streams.jvmXmx Memory allocation options for JVM.
  # @param streams.jmxPort Port for JMX protocol.
  # @param streams.metricsPort Port for metrics.

  replicas: 1
  revisionHistoryLimit: 3
  jvmXmx: -Xmx2G -XX:+UseParallelGC
  jmxPort: 9010
  metricsPort: 8081

  # @param streams.storageSize Size of ephemeral disk that holds temporary files
  storageSize: 500Mi

  # @extra streams.image **Deployment settings**
  # @param streams.image.repository Repository
  # @param streams.image.tag Tag
  # @param streams.image.pullPolicy Pull Policy

  image:
    repository: 2gis-on-premise/stat-receiver-streams
    tag: 1.11.1
    pullPolicy: IfNotPresent

  # @extra streams.resources **Limits for the Streams service**
  # @param streams.resources.requests.cpu A CPU request.
  # @param streams.resources.requests.memory A memory request.
  # @param streams.resources.limits.cpu A CPU limit.
  # @param streams.resources.limits.memory A memory limit.

  resources:
    requests:
      cpu: 1
      memory: 4G
    limits:
      cpu: 2
      memory: 4G


# @section Kafka service settings

# @param kafka.servers Kafka bootstrap connection string
# @param kafka.securityProtocol Protocol used to communicate with brokers. Valid values are: `PLAINTEXT`, `SSL`, `SASL_PLAINTEXT`, `SASL_SSL`

# @extra kafka.truststore **Trust store configuration for SSL connections**
# @param kafka.truststore.enabled
# @param kafka.truststore.secretName Kubernetes secret that holds trust store data
# @param kafka.truststore.storeFieldName Name of the secret's key that holds trust store file
# @param kafka.truststore.storePasswordFieldName Name of the secret's key that holds password to the trust store file
# @param kafka.truststore.createSecret Enable to manage trust store secret with helm
# @param kafka.truststore.storeData base64-encoded PKCS12 or JKS trust store file
# @param kafka.truststore.storePassword Password to trust store file

# @extra kafka.keystore **Configuration for SSL authentication**
# @param kafka.keystore.enabled
# @param kafka.keystore.secretName Kubernetes secret that holds key store data
# @param kafka.keystore.storeFieldName Name of the secret's key that holds key store file
# @param kafka.keystore.storePasswordFieldName Name of the secret's key that holds password to the key store file
# @param kafka.keystore.createSecret Enable to manage key store secret with helm
# @param kafka.keystore.storeData base64-encoded PKCS12 or JKS key store file
# @param kafka.keystore.storePassword Password to key store file

# @extra kafka.sasl **Configuration for sasl authenthication**
# @param kafka.sasl.enabled
# @param kafka.sasl.createSecret Enable to manage password secret with helm
# @param kafka.sasl.secretName Kubernetes secret that holds password data
# @param kafka.sasl.jaasFieldName Name of the secret's key that holds JAAS configuration
# @param kafka.sasl.jaas JAAS login context parameters for SASL connections in the format used by JAAS configuration files (see [the documentation](https://kafka.apache.org/documentation/#brokerconfigs_sasl.jaas.config))
# @param kafka.sasl.mechanism SASL mechanism used for client connections. This may be any mechanism for which a security provider is available

kafka:
  servers: ''
  securityProtocol: PLAINTEXT
  truststore:
    enabled: false
    secretName: ''
    storeFieldName: ca.p12
    storePasswordFieldName: ca.password
    createSecret: false
    storeData: ''
    storePassword: ''
  keystore:
    enabled: false
    secretName: ''
    storeFieldName: user.p12
    storePasswordFieldName: user.password
    createSecret: false
    storeData: ''
    storePassword: ''
  sasl:
    enabled: false
    createSecret: false
    secretName: ''
    mechanism: ''
    jaasFieldName: sasl.jaas.config
    jaas: ''


# @section Kubernetes [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) settings

# @param ingress.enabled If Ingress is enabled for the service.
# @param ingress.hosts[0].host Hostname for the Ingress service.

ingress:
  enabled: false
  hosts:
  - host: stat-receiver.host

# @section stat-receiver parameters
# @param statReceiver.initializeTopics If true, topics will be created automatically.
# @param statReceiver.topicsPrefix Prefix for topics.

initializeTopics:
  enabled: false
topicsPrefix: ''

# @param logLevel Log level: `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `OFF`
logLevel: INFO
