{{ if .Values.permissionsApi.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pro-api.name" . }}-permissions
  {{- with .Values.permissionsPodSettings.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
    {{- end }}
  labels:
    {{- include "pro-api.permissionLabels" . | nindent 4 }}
  {{- with .Values.permissionsPodSettings.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.permissionsPodSettings.replicaCount }}
  revisionHistoryLimit: {{ .Values.permissionsPodSettings.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "pro-api.permissionsSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      {{- with .Values.permissionsPodSettings.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pro-api.permissionLabels" . | nindent 8 }}
      {{- with .Values.permissionsPodSettings.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.permissionsPodSettings.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.permissionsPodSettings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.permissionsPodSettings.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.permissionsPodSettings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.permissionsPodSettings.priorityClassName }}
      priorityClassName: {{ .Values.permissionsPodSettings.priorityClassName }}
      {{- end }}
      {{- with .Values.permissionsPodSettings.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.permissionsPodSettings.terminationGracePeriodSeconds }}
      volumes:
        - name: temp-volume
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}-permissions
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.permissionsApiImage.repository }}:{{ .Values.permissionsApiImage.tag }}
          imagePullPolicy: {{ .Values.permissionsApiImage.pullPolicy }}
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.api.tempPath }}"
              name: temp-volume
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.permissionsPodSettings.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          env:
            - name: DEBUG
              value: "{{ .Values.api.debug }}"
            - name: ALLOW_ANY_ORIGIN
              value: "{{ .Values.api.allowAnyOrigin }}"
            - name: ENV
              value: "{{ .Values.api.env }}"
            - name: DB_CONNECTION_STRING
              value: {{ required "A valid .Values.postgres.connectionString entry required" $.Values.postgres.connectionString }}
            - name: DB_CONNECTION_STRING_READONLY
              value: "{{ .Values.postgres.connectionStringReadonly }}"
            - name: DB_CONNECTION_PWD
              valueFrom:
                secretKeyRef:
                  key: dbConnectionPwd
                  name: {{ include "pro-api.name" . }}-secret
            - name: Auth__Type
              value: {{ required "A valid .Values.auth.type entry required" $.Values.auth.type }}
            {{ if .Values.auth.permissionsApiKey }}
            - name: Auth__PermissionsApiKey
              valueFrom:
                secretKeyRef:
                  key: permissionsApiKey
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: KEYS_SERVICE_URL
              value: "{{ .Values.keys.url }}"
            {{ if .Values.keys.token }}
            - name: KEYS_SERVICE_TOKEN
              valueFrom:
                secretKeyRef:
                  key: keysServiceToken
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: Redis__Host
              value: "{{ .Values.redis.host }}"
            - name: Redis__Port
              value: "{{ .Values.redis.port }}"
            - name: Redis__Enabled
              value: "{{ .Values.redis.enabled }}"
            - name: Redis__Username
              value: {{ $.Values.redis.username }}
            {{ if .Values.redis.password }}
            - name: Redis__Password
              valueFrom:
                secretKeyRef:
                  key: redisPassword
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: Common__Logging__Format
              value: "{{ .Values.api.logging.format }}"
            - name: Common__Logging__Targets
              value: "{{ .Values.api.logging.targets }}"
            - name: Kafka__BootstrapServers
              value: {{ $.Values.kafka.bootstrapServers }}
            - name: Kafka__SecurityProtocol
              value: {{ $.Values.kafka.securityProtocol }}
            - name: Kafka__SaslMechanism
              value: {{ $.Values.kafka.sasl.mechanism }}
            - name: Kafka__SaslUsername
              value: {{ $.Values.kafka.sasl.username }}
            {{ if .Values.kafka.sasl.password }}
            - name: Kafka__SaslPassword
              valueFrom:
                secretKeyRef:
                  key: kafkaSaslPassword
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: Kafka__PermissionsTopicSettings__Name
              value: "{{ $.Values.kafka.permissionsTopic.name }}"
            - name: Kafka__PermissionsTopicSettings__ReaderGroupId
              value: "{{ $.Values.kafka.permissionsTopic.readerGroupId }}"

{{- end }}
