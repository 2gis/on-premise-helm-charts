{{ if .Values.assetPreparer.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "pro-api.asset-preparer-name" . }}
spec:
  concurrencyPolicy: Forbid
  schedule: {{ .Values.assetPreparer.schedule }}
  successfulJobsHistoryLimit: {{ .Values.assetPreparer.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.assetPreparer.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.assetPreparer.backoffLimit }}
      activeDeadlineSeconds: 172800
      template:
        spec:
          {{- with .Values.assetPreparer.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.assetPreparer.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.assetPreparer.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          restartPolicy: Never
          volumes:
            - name: temp-volume
              emptyDir: {}
          containers:
            - name: {{ include "pro-api.asset-preparer-name" . }}
              image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.assetPreparer.repository }}:{{ .Values.assetPreparer.tag }}
              imagePullPolicy: IfNotPresent
              resources:
                {{- toYaml .Values.assetPreparer.resources | nindent 16 }}
              volumeMounts:
                - mountPath: "{{ .Values.api.settings.tempPath }}"
                  name: temp-volume
              env:
                - name: JOB_NAME
                  value: {{ include "pro-api.asset-preparer-name" . }}
                - name: TEMP_PATH
                  value: "{{ .Values.api.tempPath }}"
                - name: ENV
                  value: "{{ .Values.api.env }}"
                - name: MODE
                  value: "PrepareData"
                - name: MAX_PARALLEL_JOBS
                  value: "{{ .Values.assetPreparer.settings.maxParallelJobs }}"
                - name: S3Settings__Url
                  value: {{ required "A valid .Values.dgctlStorage.host entry required" $.Values.dgctlStorage.host }}
                - name: S3Settings__Secure
                  value: "{{ .Values.dgctlStorage.secure }}"
                - name: S3Settings__Region
                  value: {{ .Values.dgctlStorage.region }}
                - name: S3Settings__DisablePayloadSigning
                  value: "{{ .Values.dgctlStorage.disablePayloadSigning }}"
                - name: S3Settings__AssetDataBucket
                  value: {{ required "A valid .Values.s3.assetsDataBucket entry required" $.Values.s3.assetsDataBucket }}
                - name: S3Settings__UserAssetDataBucket
                  value: {{ required "A valid .Values.s3.userAssetsDataBucket entry required" $.Values.s3.userAssetsDataBucket }}
                - name: S3Settings__SnapshotBucket
                  value: {{ required "A valid .Values.s3.snapshotBucket entry required" $.Values.s3.snapshotBucket }}
                - name: S3Settings__AccessKey
                  valueFrom:
                    secretKeyRef:
                      key: s3AccessKey
                      name: {{ include "pro-api.name" . }}-secret
                - name: S3Settings__SecretKey
                  valueFrom:
                    secretKeyRef:
                      key: s3SecretKey
                      name: {{ include "pro-api.name" . }}-secret

                - name: Elastic__Host
                  value: {{ required "A valid .Values.elastic.host entry required" $.Values.elastic.host }}
                - name: Elastic__Secure
                  value: "{{ $.Values.elastic.secure }}"
                - name: Elastic__Port
                  value: "{{ $.Values.elastic.port }}"
                - name: Elastic__Username
                  value: "{{ $.Values.elastic.username }}"
                {{ if .Values.elastic.password }}
                - name: Elastic__Password
                  valueFrom:
                    secretKeyRef:
                      key: esPassword
                      name: {{ include "pro-api.name" . }}-secret
                {{ end }}
                - name: Elastic__IndexPrefix
                  value: "{{ $.Values.elastic.indexPrefix }}"
                - name: Elastic__EnableHttpCompression
                  value: "{{ $.Values.elastic.enableHttpCompression }}"

                - name: API_URL
                  value: http://{{ include "pro-api.name" . }}
                {{ if .Values.api.settings.auth.apiKey }}
                - name: API_TOKEN
                  valueFrom:
                    secretKeyRef:
                      key: apiKey
                      name: {{ include "pro-api.name" . }}-secret
                {{ end }}
                {{ if .Values.assetPreparer.settings.files }}
                - name: FILES
                  value: "{{ .Values.assetPreparer.settings.files}}"
                {{ end }}
                - name: Common__Logging__Format
                  value: "{{ .Values.api.settings.logging.format }}"
                - name: Common__Logging__Targets
                  value: "{{ .Values.api.settings.logging.targets }}"
                - name: Digger__Address
                  value: "{{ .Values.digger.url}}"
                - name: Digger__UserName
                  value: "{{ .Values.digger.userName}}"
                {{ if .Values.digger.password }}
                - name: Digger__Password
                  valueFrom:
                    secretKeyRef:
                      key: diggerPassword
                      name: {{ include "pro-api.name" . }}-secret
                {{ end }}
{{ end }}
