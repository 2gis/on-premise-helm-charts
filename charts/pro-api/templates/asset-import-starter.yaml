{{ if .Values.assetImporter.startOnDeploy }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "pro-api.asset-importer-name" . }}-starter
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: {{ .Values.assetImporter.backoffLimit }}
  template:
    spec:
      {{- with .Values.assetImporter.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      serviceAccountName: {{ include "pro-api.service-account-name" . }}
      volumes:
        - name: temp-volume
          emptyDir: {}
      containers:
        - name: {{ include "pro-api.asset-importer-name" . }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.assetImporter.repository }}:{{ .Values.assetImporter.tag }}
          imagePullPolicy: IfNotPresent
          resources:
            {{- toYaml .Values.assetImporter.resources | nindent 16 }}
          volumeMounts:
            - mountPath: "{{ .Values.api.tempPath }}"
              name: temp-volume
          env:
            - name: JOB_NAME
              value: {{ include "pro-api.asset-importer-name" . }}
            - name: TEMP_PATH
              value: "{{ .Values.api.tempPath }}"
            - name: ENV
              value: "{{ .Values.api.env }}"
            - name: MODE
              value: "Schedule"
            - name: MAX_PARALLEL_JOBS
              value: "{{ .Values.assetImporter.maxParallelJobs }}"
            - name: manifest
              value: "{{ .Values.dgctlStorage.manifest }}"
            - name: S3Settings__Url
              value: {{ required "A valid .Values.dgctlStorage.host entry required" $.Values.dgctlStorage.host }}
            - name: S3Settings__AssetDataBucket
              value: {{ required "A valid .Values.dgctlStorage.bucket entry required" $.Values.dgctlStorage.bucket }}
            - name: S3Settings__UserAssetDataBucket
              value: {{ required "A valid .Values.s3.userAssetsDataBucket entry required" $.Values.s3.userAssetsDataBucket }}
            - name: S3Settings__LayerDataBucket
              value: {{ required "A valid .Values.s3.layerDataBucket entry required" $.Values.s3.layerDataBucket }}
            - name: S3Settings__SnapshotBucket
              value: {{ required "A valid .Values.s3.snapshotBucket entry required" $.Values.s3.snapshotBucket }}
            - name: S3Settings__AccessKey
              valueFrom:
                secretKeyRef:
                  key: s3AccessKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: S3Settings__SecretKey
              valueFrom:
                secretKeyRef:
                  key: s3SecretKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: ES_HOST
              value: {{ required "A valid .Values.elastic.host entry required" $.Values.elastic.host }}
            {{- if .Values.elastic.credentials }}
            - name: ES_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  key: esCredentials
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            - name: ES_INDEX_PREFIX
              value: "{{ .Values.elastic.indexPrefix }}"
            - name: API_URL
              value: http://{{ include "pro-api.name" . }}
            {{- if .Values.auth.apiKey }}
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: apiKey
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            {{- if .Values.assetImporter.files }}
            - name: FILES
              value: "{{ .Values.assetImporter.files}}"
            {{- end }}
            - name: Common__Logging__Format
              value: "{{ .Values.api.logging.format }}"
            - name: Common__Logging__Targets
              value: "{{ .Values.api.logging.targets }}"
{{ end }}
