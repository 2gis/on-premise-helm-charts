{{ if .Values.assetImporter.startOnDeploy }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "pro-api.asset-importer-name" . }}-starter
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: {{ .Values.assetImporter.backoffLimit }}
  template:
    spec:
      {{- with .Values.assetImporter.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.assetImporter.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.assetImporter.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      serviceAccountName: {{ include "pro-api.service-account-name" . }}
      volumes:
        - name: temp-volume
          emptyDir: {}
      containers:
        - name: {{ include "pro-api.asset-importer-name" . }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.assetImporter.repository }}:{{ .Values.assetImporter.tag }}
          imagePullPolicy: IfNotPresent
          resources:
            {{- toYaml .Values.assetImporter.resources | nindent 16 }}
          volumeMounts:
            - mountPath: {{ .Values.api.settings.tempPath | quote }}
              name: temp-volume
          env:
            - name: JOB_NAME
              value: {{ include "pro-api.asset-importer-name" . }}
            - name: TEMP_PATH
              value: {{ .Values.api.settings.tempPath | quote }}
            - name: ENV
              value: {{ .Values.api.settings.env | quote }}
            - name: MODE
              value: {{ .Values.assetImporter.startOnDeployMode | quote }}
            - name: MAX_PARALLEL_JOBS
              value: {{ .Values.assetImporter.settings.maxParallelJobs | quote }}
            - name: manifest_filename
              value: {{ .Values.dgctlStorage.manifest | quote }}
            - name: S3Settings__Url
              value: {{ required "A valid .Values.dgctlStorage.host entry required" $.Values.dgctlStorage.host }}
            - name: S3Settings__Secure
              value: {{ .Values.dgctlStorage.secure | quote }}
            - name: S3Settings__Region
              value: {{ .Values.dgctlStorage.region }}
            - name: S3Settings__DisablePayloadSigning
              value: {{ .Values.dgctlStorage.disablePayloadSigning | quote }}
            - name: S3Settings__DgctlStorageBucket
              value: {{ required "A valid .Values.dgctlStorage.bucket entry required" $.Values.dgctlStorage.bucket }}
            - name: S3Settings__AssetDataBucket
              value: {{ required "A valid .Values.s3.assetsDataBucket entry required" $.Values.s3.assetsDataBucket }}
            - name: S3Settings__UserAssetDataBucket
              value: {{ required "A valid .Values.s3.userAssetsDataBucket entry required" $.Values.s3.userAssetsDataBucket }}
            - name: S3Settings__LayerDataBucket
              value: {{ required "A valid .Values.s3.layerDataBucket entry required" $.Values.s3.layerDataBucket }}
            - name: S3Settings__SnapshotBucket
              value: {{ required "A valid .Values.s3.snapshotBucket entry required" $.Values.s3.snapshotBucket }}
            - name: S3Settings__AccessKey
              valueFrom:
                secretKeyRef:
                  key: s3AccessKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: S3Settings__SecretKey
              valueFrom:
                secretKeyRef:
                  key: s3SecretKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: Elastic__InstanceName
              value: {{ $.Values.elastic.instanceName | default $.Values.elastic.host }}
            {{- range $i, $s := $.Values.elastic.nodes}}
            - name: Elastic__Nodes__{{$i}}__Host
              value: {{ $s.host }}
            - name: Elastic__Nodes__{{$i}}__Port
              value: {{ $s.port | quote }}
            {{ end }}
            - name: Elastic__Secure
              value: {{ $.Values.elastic.secure | quote }}
            - name: Elastic__Username
              value: {{ $.Values.elastic.username | quote }}
            {{ if .Values.elastic.password }}
            - name: Elastic__Password
              valueFrom:
                secretKeyRef:
                  key: esPassword
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: Elastic__IndexPrefix
              value: {{ $.Values.elastic.indexPrefix | quote }}
            - name: Elastic__EnableHttpCompression
              value: {{ $.Values.elastic.enableHttpCompression | quote }}

            - name: API_URL
              value: http://{{ include "pro-api.name" . }}
            {{- if .Values.api.settings.auth.apiKey }}
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: apiKey
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            {{- if .Values.assetImporter.settings.files }}
            - name: FILES
              value: {{ .Values.assetImporter.settings.files | quote }}
            {{- end }}
            - name: Common__Logging__Format
              value: {{ .Values.api.settings.logging.format | quote }}
            - name: Common__Logging__Targets
              value: {{ .Values.api.settings.logging.targets | quote }}
            - name: Common__FailJobOnError
              value: "true"
            - name: Common__TtlSecondsAfterFinished
              value: {{ .Values.assetImporter.settings.ttlSecondsAfterFinished | quote }}
            - name: Navi__Url
              value: {{ .Values.navi.url }}
            - name: Navi__Key
              valueFrom:
                secretKeyRef:
                  key: routingApi2gisKey
                  name: {{ include "pro-api.name" . }}-secret
{{ end }}
