apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pro-api.name" . }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "pro-api.labels" . | nindent 4 }}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- if .Values.strategy }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pro-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pro-api.labels" . | nindent 8 }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      serviceAccountName: {{ include "pro-api.service-account-name" . }}
      volumes:
        - name: temp-volume
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.api.tempPath }}"
              name: temp-volume
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          env:
            - name: DEBUG
              value: "{{ .Values.api.debug }}"
            - name: JOB_NAME
              value: {{ include "pro-api.asset-importer-name" . }}
            - name: TEMP_PATH
              value: "{{ .Values.api.tempPath }}"
            - name: CATALOG_API_2GIS_URL
              value: "{{ .Values.catalog.host }}"
            - name: CATALOG_API_2GIS_KEY
              valueFrom:
                secretKeyRef:
                  key: catalogApi2gisKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: ROUTING_API_2GIS_URL
              value: {{ .Values.navi.host }}
            - name: ROUTING_API_2GIS_KEY
              valueFrom:
                secretKeyRef:
                  key: routingApi2gisKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: SEARCH_API_URL
              value: {{ .Values.search.host }}
            - name: ES_HOST
              value: "{{ .Values.elastic.host }}"
            - name: LOG_ES_QUERIES
              value: "{{ .Values.api.logEsQueries }}"
            - name: ALLOW_ANY_ORIGIN
              value: "{{ .Values.api.allowAnyOrigin }}"
            - name: ENV
              value: "{{ .Values.api.env }}"
            - name: DB_CONNECTION_STRING
              value: "{{ .Values.postgres.connectionString }}"
            {{ if .Values.postgres.connectionStringReadonly }}
            - name: DB_CONNECTION_STRING_READONLY
              value: "{{ .Values.postgres.connectionStringReadonly }}"
            {{ end }}
            - name: DB_CONNECTION_PWD
              valueFrom:
                secretKeyRef:
                  key: dbConnectionPwd
                  name: {{ include "pro-api.name" . }}-secret
            - name: S3Settings__Url
              value: "{{ .Values.dgctlStorage.host }}"
            - name: S3Settings__AssetDataBucket
              value: "{{ .Values.dgctlStorage.bucket }}"
            - name: S3Settings__UserAssetDataBucket
              value: "{{ .Values.s3.userAssetsDataBucket }}"
            - name: S3Settings__LayerDataBucket
              value: "{{ .Values.s3.layerDataBucket }}"
            - name: S3Settings__AccessKey
              valueFrom:
                secretKeyRef:
                  key: s3AccessKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: S3Settings__SecretKey
              valueFrom:
                secretKeyRef:
                  key: s3SecretKey
                  name: {{ include "pro-api.name" . }}-secret
            {{ if .Values.elastic.credentials }}
            - name: ES_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  key: esCredentials
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: AUTH_ENDPOINT
              value: "{{ .Values.auth.host }}"
            - name: USE_MOCK_AUTH
              value: "{{ .Values.api.useMockAuth }}"
            {{ if .Values.api.token }}
            - name: SERVICE_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  key: apiServiceToken
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: PERMISSIONS_API_URL
              value: "{{ .Values.permissionsApi.host }}"
            {{ if .Values.permissionsApi.key }}
            - name: PERMISSIONS_API_KEY
              valueFrom:
                secretKeyRef:
                  key: permissionsApiKey
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
