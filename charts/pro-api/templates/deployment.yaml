apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pro-api.name" . }}
  {{- with .Values.api.pod.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- if (.Values.dgctlStorage).manifest }}
    {{- with (include "pro-api.manifestCode" .) }}
    manifest: {{ . | quote }}
    {{- end }}
    {{- end }}
    {{- include "pro-api.labels" . | nindent 4 }}
  {{- with .Values.api.pod.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.api.pod.replicaCount }}
  revisionHistoryLimit: {{ .Values.api.pod.revisionHistoryLimit }}
  {{- if .Values.api.pod.strategy }}
  strategy:
    {{- toYaml .Values.api.pod.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pro-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      {{- with .Values.api.pod.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pro-api.labels" . | nindent 8 }}
      {{- with .Values.api.pod.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.api.pod.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.pod.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.pod.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.pod.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.api.pod.priorityClassName }}
      priorityClassName: {{ .Values.api.pod.priorityClassName }}
      {{- end }}
      {{- with .Values.api.pod.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.api.pod.terminationGracePeriodSeconds }}
      serviceAccountName: {{ include "pro-api.service-account-name" . }}
      volumes:
        - name: temp-volume
          emptyDir: {}
      containers:
        - name: {{ include "pro-api.name" . }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.api.settings.tempPath }}"
              name: temp-volume
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 20
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.api.pod.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          env:
            - name: DEBUG
              value: "{{ .Values.api.settings.debug }}"
            - name: Import__EnableUserAssetsImporter
              value: "{{ .Values.api.settings.backgroundJobs.enableUserAssetsImporter }}"
            - name: Import__EnableAssetsStreaming
              value: "{{ .Values.api.settings.backgroundJobs.enableAssetsStreaming }}"
            - name: Import__AssetImporterJobName
              value: {{ include "pro-api.asset-importer-name" . }}
            - name: Import__ExternalLinksProxyUrl
              value: "{{ .Values.assetImporter.settings.externalLinksProxyUrl }}"
            - name: Import__ExternalLinksAllowedHosts
              value: "{{ .Values.assetImporter.settings.externalLinksAllowedHosts }}"
            - name: Import__TtlSecondsAfterFinished
              value: "{{ .Values.assetImporter.settings.ttlSecondsAfterFinished }}"
            - name: TEMP_PATH
              value: "{{ .Values.api.settings.tempPath }}"
            - name: CATALOG_API_2GIS_URL
              value: "{{ .Values.catalog.url }}"
            - name: CATALOG_API_2GIS_KEY
              valueFrom:
                secretKeyRef:
                  key: catalogApi2gisKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: Navi__Url
              value: {{ .Values.navi.url }}
            - name: Navi__Key
              valueFrom:
                secretKeyRef:
                  key: routingApi2gisKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: SEARCH_API_URL
              value: {{ .Values.search.url }}

            - name: Elastic__Host
              value: {{ required "A valid .Values.elastic.host entry required" $.Values.elastic.host }}
            - name: Elastic__Secure
              value: "{{ $.Values.elastic.secure }}"
            - name: Elastic__Port
              value: "{{ $.Values.elastic.port }}"
            - name: Elastic__Username
              value: "{{ $.Values.elastic.username }}"
            {{ if .Values.elastic.password }}
            - name: Elastic__Password
              valueFrom:
                secretKeyRef:
                  key: esPassword
                  name: {{ include "pro-api.name" . }}-secret
            {{ end }}
            - name: Elastic__IndexPrefix
              value: "{{ $.Values.elastic.indexPrefix }}"
            - name: Elastic__EnableHttpCompression
              value: "{{ $.Values.elastic.enableHttpCompression }}"

            - name: ENV
              value: "{{ .Values.api.settings.env }}"
            - name: Common__CorsOrigins
              value: "{{ .Values.api.settings.corsOrigins }}"
            - name: Common__FilterByZoneCodes
              value: "{{ .Values.api.settings.filterByZoneCodes }}"
            - name: Postgres__ConnectionString
              value: {{ include "pro-api.connectionString" . }}
            - name: Postgres__ConnectionStringReadonly
              value: {{ include "pro-api.connectionStringReadOnly" . }}
            - name: Postgres__Password
              valueFrom:
                secretKeyRef:
                  key: dbConnectionPwd
                  name: {{ include "pro-api.name" . }}-secret
            {{- if .Values.postgres.api.ro.password }}
            - name: Postgres__PasswordRo
              valueFrom:
                secretKeyRef:
                  key: dbConnectionPwdRo
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            - name: S3Settings__Url
              value: {{ required "A valid .Values.dgctlStorage.host entry required" $.Values.dgctlStorage.host }}
            - name: S3Settings__Secure
              value: "{{ .Values.dgctlStorage.secure }}"
            - name: S3Settings__Region
              value: {{ .Values.dgctlStorage.region }}
            - name: S3Settings__DisablePayloadSigning
              value: "{{ .Values.dgctlStorage.disablePayloadSigning }}"
            - name: S3Settings__AssetDataBucket
              value: {{ required "A valid .Values.s3.assetsDataBucket entry required" $.Values.s3.assetsDataBucket }}
            - name: S3Settings__UserAssetDataBucket
              value: {{ required "A valid .Values.s3.userAssetsDataBucket entry required" $.Values.s3.userAssetsDataBucket }}
            - name: S3Settings__LayerDataBucket
              value: {{ required "A valid .Values.s3.layerDataBucket entry required" $.Values.s3.layerDataBucket }}
            - name: S3Settings__SnapshotBucket
              value: {{ required "A valid .Values.s3.snapshotBucket entry required" $.Values.s3.snapshotBucket }}
            - name: S3Settings__ResourcesBucket
              value: {{ required "A valid .Values.s3.resourcesBucket entry required" $.Values.s3.resourcesBucket }}
            - name: S3Settings__AccessKey
              valueFrom:
                secretKeyRef:
                  key: s3AccessKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: S3Settings__SecretKey
              valueFrom:
                secretKeyRef:
                  key: s3SecretKey
                  name: {{ include "pro-api.name" . }}-secret
            - name: Kafka__BootstrapServers
              value: {{ $.Values.kafka.bootstrapServers }}
            - name: Kafka__SecurityProtocol
              value: {{ $.Values.kafka.securityProtocol }}
            - name: Kafka__SaslMechanism
              value: {{ $.Values.kafka.sasl.mechanism }}
            - name: Kafka__SaslUsername
              value: {{ $.Values.kafka.sasl.username }}
            {{- if .Values.kafka.sasl.password }}
            - name: Kafka__SaslPassword
              valueFrom:
                secretKeyRef:
                  key: kafkaSaslPassword
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            - name: Kafka__AssetTopicsReaderGroupId
              value: {{ $.Values.kafka.assetTopicsReaderGroupId }}
            - name: Kafka__CreateTopics
              value: "{{ $.Values.kafka.createTopics }}"
            - name: Kafka__RefreshAssetsIntervalMinutes
              value: "{{ $.Values.kafka.refreshAssetsIntervalMinutes }}"
            - name: Kafka__ImportTasksTopicSettings__Name
              value: {{ $.Values.kafka.importTasksTopic.name }}
            - name: Kafka__ImportTasksTopicSettings__ReaderGroupId
              value: {{ $.Values.kafka.importTasksTopic.readerGroupId }}
            - name: Kafka__AssetDataTopicSettings__Name
              value: {{ required "A valid .Values.kafka.assetDataTopic.name entry required" $.Values.kafka.assetDataTopic.name }}
            - name: Kafka__EventsTopicSettings__Name
              value: {{ required "A valid .Values.kafka.eventsTopic.name entry required" $.Values.kafka.eventsTopic.name }}
            - name: Kafka__EventsTopicSettings__ReaderGroupId
              value: {{ required "A valid .Values.kafka.eventsTopic.readerGroupId entry required" $.Values.kafka.eventsTopic.readerGroupId }}
            - name: Kafka__UseReplicaTopics
              value: "{{ $.Values.kafka.useReplicaTopics }}"
            - name: Auth__Type
              value: {{ required "A valid .Values.api.settings.auth.type entry required" $.Values.api.settings.auth.type }}
            - name: Auth__Url
              value: {{ required "A valid .Values.api.settings.auth.url entry required" $.Values.api.settings.auth.url }}
            - name: Auth__UserInfoEndpoint
              value: "{{ .Values.api.settings.auth.userInfoEndpoint }}"
            - name: Auth__WellKnownConfigEndpoint
              value: "{{ .Values.api.settings.auth.wellKnownConfigEndpoint }}"
            - name: Auth__AutoRegisterUsers
              value: "{{ .Values.api.settings.auth.autoRegisterUsers }}"
            - name: Auth__TurnOffCertValidation
              value: "{{ .Values.api.settings.auth.turnOffCertValidation }}"
            {{- if .Values.api.settings.auth.apiKey }}
            - name: Auth__ApiKey
              valueFrom:
                secretKeyRef:
                  key: apiKey
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            - name: Auth__PermissionsApiUrl
              value: {{ include "pro-api.permissions-url" . }}
            {{- if .Values.permissions.settings.auth.apiKey }}
            - name: Auth__PermissionsApiKey
              valueFrom:
                secretKeyRef:
                  key: permissionsApiKey
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            {{- range $i, $s := .Values.api.settings.auth.shareKeys }}
            - name: Auth__ShareKeys__{{$i}}
              value: "{{ $s }}"
            {{- end }}
            - name: Auth__SkipShareLinksPermissionsCheck
              value: "{{ .Values.api.settings.auth.skipShareLinksPermissionsCheck }}"
            - name: License__Key
              value: {{ required "A valid .Values.api.settings.licenseKey entry required" $.Values.api.settings.licenseKey }}
            - name: KEYS_SERVICE_URL
              value: "{{ .Values.keys.url }}"
            {{- if .Values.keys.token }}
            - name: KEYS_SERVICE_TOKEN
              valueFrom:
                secretKeyRef:
                  key: keysServiceToken
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            - name: Redis__Host
              value: {{ required "A valid .Values.redis.host entry required" $.Values.redis.host }}
            - name: Redis__Port
              value: "{{ .Values.redis.port }}"
            - name: Redis__Enabled
              value: "{{ .Values.redis.enabled }}"
            - name: Redis__Username
              value: {{ $.Values.redis.username }}
            {{- if .Values.redis.password }}
            - name: Redis__Password
              valueFrom:
                secretKeyRef:
                  key: redisPassword
                  name: {{ include "pro-api.name" . }}-secret
            {{- end }}
            - name: Common__Logging__Format
              value: "{{ .Values.api.settings.logging.format }}"
            - name: Common__Logging__Targets
              value: "{{ .Values.api.settings.logging.targets }}"
            - name: Common__EsDataCentersCount
              value: "{{ .Values.api.settings.esDataCentersCount }}"
            - name: RateLimiter__RequestsLimit
              value: "{{ .Values.api.settings.rateLimiter.requestsLimit }}"
            - name: RateLimiter__WindowSizeInSeconds
              value: "{{ .Values.api.settings.rateLimiter.windowSizeInSeconds }}"
            - name: LocalCache__Enabled
              value: "{{ .Values.api.settings.localCache.enabled }}"
            - name: LocalCache__TrackStatistics
              value: "{{ .Values.api.settings.localCache.trackStatistics }}"
            - name: LicensingService__BaseUri
              value: {{ required "A valid .Values.license.url entry required" $.Values.license.url }}
            - name: LayerGeneration__IsochroneLayerMaxPointsCount
              value: "{{ .Values.api.settings.layerGeneration.isochroneLayerMaxPointsCount }}"
            - name: TasksApi__Url
              value: http://{{ include "pro-api.tasks-name" . }}:{{ .Values.tasks.settings.grpcPort }}
            - name: TasksApi__UseForLayerDataPreparation
              value: "{{ .Values.api.settings.tasksApi.useForLayerDataPreparation }}"
            - name: BackgroundJobs__InitOnStartupJob__Enabled
              value: "{{ ne .Values.api.settings.backgroundJobs.enableInitOnStartupJob false }}"
            - name: BackgroundJobs__LayerDataPrepareJob__Enabled
              value: "{{ ne .Values.api.settings.backgroundJobs.enableLayerDataPrepareJob false }}"
            - name: BackgroundJobs__ClearCacheJob__Enabled
              value: "{{ ne .Values.api.settings.backgroundJobs.enableClearCacheJob false }}"
            - name: BackgroundJobs__ClearMetadataAndStorageJob__Enabled
              value: "{{ ne .Values.api.settings.backgroundJobs.enableClearMetadataAndStorageJob false }}"
            - name: BackgroundJobs__MetricsCollectionJob__Enabled
              value: "{{ ne .Values.api.settings.backgroundJobs.enableMetricsCollectionJob false }}"
