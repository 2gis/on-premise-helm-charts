apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api.name" . }}
  {{- with .Values.api.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "api.labels" . | nindent 4 }}
  {{- with .Values.api.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.api.replicaCount }}
  revisionHistoryLimit: {{ .Values.api.revisionHistoryLimit }}
  {{- if .Values.strategy }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      {{- with .Values.api.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "api.labels" . | nindent 8 }}
      {{- with .Values.api.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
        - name: temp-volume
          emptyDir: { }
      containers:
        - name: {{ include "api.name" . }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" $.Values.dgctlDockerRegistry }}/{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.api.tempPath }}"
              name: temp-volume
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/live
              port: http
            failureThreshold: 20
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "sleep 5" ]
          env:
            - name: DEBUG
              value: "{{ .Values.api.debug }}"
            - name: Common__TempPath
              value: "{{ .Values.api.tempPath }}"
            - name: Common__AllowAnyOrigin
              value: "{{ .Values.api.allowAnyOrigin }}"
            - name: Common__Logging__Format
              value: "{{ .Values.api.logging.format }}"
            - name: PgSettings__ConnectionString
              value: {{ required "A valid .Values.postgres.connectionString entry required" $.Values.postgres.connectionString }}
            {{ if .Values.postgres.connectionStringReadonly }}
            - name: PgSettings__ConnectionStringReadonly
              value: "{{ .Values.postgres.connectionStringReadonly }}"
            {{ end }}
            - name: PgSettings__UserName
              value: "{{ .Values.postgres.userName }}"
            - name: PgSettings__AppName
              value: "{{ .Values.postgres.appName }}"
            - name: PgSettings__Password
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ include "api.name" . }}-secret
            - name: Hangfire__Database__ConnectionString
              value: "{{ .Values.hangfire.database.connectionString }}"
            - name: Hangfire__Database__UserName
              value: "{{ .Values.hangfire.database.userName }}"
            - name: Hangfire__Database__AppName
              value: "{{ .Values.hangfire.database.appName }}"
            - name: Hangfire__Database__Password
              valueFrom:
                secretKeyRef:
                  name: {{ include "api.name" . }}-secret
                  key: hangfirePassword
            {{ if .Values.hangfire.dashboardAuthorization.enabled }}
            - name: Hangfire__DashboardAuthorization__Enabled
              value: "{{ .Values.hangfire.dashboardAuthorization.enabled }}"
            - name: Hangfire__DashboardAuthorization__Login
              value: "{{ .Values.hangfire.dashboardAuthorization.login }}"
            - name: Hangfire__DashboardAuthorization__Password
              valueFrom:
                secretKeyRef:
                  name: {{ include "api.name" . }}-secret
                  key: hangfireDashboardPassword
            {{ else }}
            - name: Hangfire__DashboardAuthorization__Enabled
              value: "{{ .Values.hangfire.dashboardAuthorization.enabled }}"
            {{ end }}
