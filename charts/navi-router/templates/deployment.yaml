apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "router.fullname" . }}
  labels:
    {{- include "router.labels" . | nindent 4 }}
    navigroup: {{ .Values.navigroup | default "" | quote }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.strategy }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "router.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "router.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "router.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      - name: {{ include "router.fullname" . }}-configmap
        configMap:
          name: {{ include "router.fullname" . }}-configmap
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: {{ include "router.fullname" . }}-configmap
            mountPath: /src/etc/router.conf
            subPath: router.conf
          - name: {{ include "router.fullname" . }}-configmap
            mountPath: /src/etc/rules.conf
            subPath: rules.conf
          ports:
            - name: http
              containerPort: {{ .Values.router.appPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /heartbeat
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /successfulwork
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- range $type, $token := (.Values.router.keyManagementService).apis }}
            {{- if $token }}
            - name: {{ $type | replace "-" "_" | upper | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "router.fullname" $ | quote }}
                  key: {{ $type | quote }}
            {{- end }}{{- /* if $token */}}
            {{- end }}{{- /* range $type, $token */}}
            {{- if (.Values.router.keyManagementService).commonToken }}
            - name: COMMON_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "router.fullname" . | quote }}
                  key: common_token
            {{- end }}
      terminationGracePeriodSeconds: {{ .Values.termination_grace_period_seconds | default 60 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        {{- include "tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
