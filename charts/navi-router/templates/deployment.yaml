{{- define "router.deployment" }}
metadata:
  labels:
    navigroup: {{ .Values.navigroup | default "" | quote }}
spec:
  template:
    metadata:
      annotations:
        checksum/config: {{ (include (print .Template.BasePath "/configmap.yaml") . | fromYaml).data | toYaml | sha256sum }}
        checksum/secret: {{ (include (print .Template.BasePath "/secret.yaml") . | fromYaml).data | toYaml | sha256sum }}
    spec:
      volumes:
      - name: {{ include "generic-chart.fullname" . }}-configmap
        configMap:
          name: {{ include "generic-chart.fullname" . }}-configmap
      {{- if .Values.router.sentry.enabled }}
      - name: sentry-volume
        emptyDir: {}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ required "A valid .Values.dgctlDockerRegistry entry required" .Values.dgctlDockerRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: {{ include "generic-chart.fullname" . }}-configmap
            mountPath: /src/etc/router.conf
            subPath: router.conf
          - name: {{ include "generic-chart.fullname" . }}-configmap
            mountPath: /src/etc/rules.conf
            subPath: rules.conf
          ports:
            - name: http
              containerPort: {{ .Values.router.appPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /heartbeat
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /successfulwork
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- $ctx := . }}
            {{- range $type, $token := (.Values.keys).apis }}
            {{- if $token }}
            - name: {{ $type | replace "-" "_" | upper | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "generic-chart.fullname" $ctx | quote }}
                  key: {{ $type | quote }}
            {{- end }}{{- /* if $token */}}
            {{- end }}{{- /* range $type, $token */}}
            {{- if (.Values.keys).commonToken }}
            - name: COMMON_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "generic-chart.fullname" . | quote }}
                  key: common_token
            {{- end }}
            {{- if (.Values.requestsSignCheck).salt }}
            - name: ONLINE_HASH_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ include "generic-chart.fullname" . | quote }}
                  key: online_hash_salt
            {{- end }}
            {{- if (.Values.requestsSignCheck).hashSalt }}
            - name: HASH_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ include "generic-chart.fullname" . | quote }}
                  key: hash_salt
            {{- end }}
            - name: TZ
              value: {{ .Values.timezone | quote }}
          lifecycle:
            # wait for the endpoint removal process
            preStop:
              exec:
                command:
                  - sleep
                  - {{ .Values.preStopDelay | quote }}
{{- end }}{{- /* define "router.deployment" */}}
{{- template "generic-chart.merge" (list . "router.deployment" "generic-chart.deployment.tpl") }}
