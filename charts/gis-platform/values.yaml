# @section Docker Registry settings

# @param dgctlDockerRegistry Docker Registry endpoint where On-Premise services' images reside. Format: `host:port`.

dgctlDockerRegistry: ''


# @section Common settings

# @param host Service hostname.
# @param protocol Protocol to use: `http` or `https`.

host: gis-platform.host
protocol: https


# @section Kubernetes [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) settings

# @param ingress.enabled If Ingress is enabled for the service.
# @param ingress.hosts[0].host Hostname for the Ingress service.

ingress:
  enabled: false
  hosts:
  - host: gis-platform.host


# @section Docker registry settings

# @param spcore.image.repository SPCore service image repository.
# @param spcore.image.tag SPCore service image tag.
# @param portal.image.repository Portal service image repository.
# @param portal.image.tag Portal service image tag.
# @param zookeeper.image.repository ZooKeeper service image repository.
# @param zookeeper.image.tag ZooKeeper service image tag.


# @section SPCore service settings

# @param spcore.replicaCount A replica count for the pod.
# @param spcore.service Service settings.
# @param spcore.debug If the debug mode is enabled.
# @param spcore.resetCluster If true, the cluster will be reset when applying this configuration.
# @param spcore.updateDb If true, the database schema and data will be updated when applying this configuration.
# @param spcore.terminationGracePeriodSeconds Wait for up to this amount of seconds for a running instance of the service to shut down.
# @param spcore.cloudPort Cloud port.
# @param spcore.httpPort SPCore service HTTP port.
# @param spcore.maxRenderTargets Maximum number of targets to render simultaneously.
# @param spcore.loglevel Log level.
# @skip spcore.syncParameters

spcore:
  replicaCount: 1

  service: {}
  debug: false
  resetCluster: false
  updateDb: true
  terminationGracePeriodSeconds: 60
  syncParameters: false

  cloudPort: 5050
  httpPort: 5051
  maxRenderTargets: 1000
  loglevel: Info

  image:
    repository: 2gis-on-premise/gis_platform_spcore
    tag: 2022.9.29

  resources:
    requests:
      cpu: 800m
      memory: 4096Mi
    limits:
      cpu: 800m
      memory: 4096Mi

  # @extra spcore.cors **CORS settings.**
  # @param spcore.cors.allowEveryone If true, requests from any origin will be allowed.
  # @param spcore.cors.origins List of allowed origins (if `allowEveryone` is false).

  cors:
    allowEveryone: false
    origins: []

  # @extra spcore.s3 **S3-compatible storage settings.**
  # @param spcore.s3.accessKey S3 access key for accessing the bucket.
  # @param spcore.s3.secretKey S3 secret key for accessing the bucket.
  # @param spcore.s3.host S3 endpoint. Format: `host:port`.
  # @param spcore.s3.region S3 region.
  # @param spcore.s3.bucket S3 bucket name.
  # @param spcore.s3.sessionBucket S3 bucket name for temporary session files.

  s3:
    accessKey: ''
    secretKey: ''
    host: s3.host
    region: US
    bucket: spstatic
    sessionBucket: spsession

  # @extra spcore.postgres **Database access settings.**
  # @param spcore.postgres.host PostgreSQL host.
  # @param spcore.postgres.port PostgreSQL port.
  # @param spcore.postgres.username PostgreSQL username.
  # @param spcore.postgres.password PostgreSQL password.
  # @param spcore.postgres.name PostgreSQL database name.
  # @param spcore.postgres.poolsize PostgreSQL connection pool size.

  postgres:
    host: postgres.host
    port: 5432
    username: gisadmin
    password: dbpass
    name: gis-platform
    poolsize: 25

  # @extra spcore.admin **Admin access settings.**
  # @param spcore.admin.email Admin email
  # @param spcore.admin.password Admin password

  admin:
    email: admin@example.com
    password: '123456'

  # @extra spcore.jwt **JSON Web Token (JWT) settings.**
  # @param spcore.jwt.tokenKey JWT default user token.
  # @param spcore.jwt.tokenAdmin JWT admin user token.

  jwt:
    tokenKey: supersecrettoken
    tokenAdmin: supersecrettoken

  # @extra spcore.catalog **Catalog settings.**
  # @param spcore.catalog.url Catalog service URL.
  # @param spcore.catalog.key Catalog access key.
  # @param spcore.catalog.type Additional geocoder filter
  # @param spcore.catalog.regionId Additional geocoder filter

  catalog:
    url: https://catalog-api.host
    key: ''
    type: ''
    regionId: ''

  # @extra spcore.navi **Navi settings.**
  # @param spcore.navi.url Navi service URL.

  navi:
    url: https://catalog-api.host

  # @extra spcore.defaultLimits **Default limits.**
  # @param spcore.defaultLimits.tables Maximum number of tables.
  # @param spcore.defaultLimits.layers Maximum number of layers.
  # @param spcore.defaultLimits.projects Maximum number of projects.
  # @param spcore.defaultLimits.features Maximum number of features.

  defaultLimits:
    tables: 500
    layers: 500
    projects: 1000
    features: 1000000

  # @extra spcore.startupProbe **Startup probe [settings](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/) .**
  # @param spcore.startupProbe.initialDelaySeconds Seconds before the first probe.
  # @param spcore.startupProbe.periodSeconds Probing period.
  # @param spcore.startupProbe.failureThreshold Probing failure threshold.

  startupProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    failureThreshold: 100

  # @extra spcore.readinessProbe **Readiness probe [settings](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/) .**
  # @param spcore.readinessProbe.initialDelaySeconds Seconds before the first probe.
  # @param spcore.readinessProbe.periodSeconds Probing period.
  # @param spcore.readinessProbe.failureThreshold Probing failure threshold.

  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    failureThreshold: 3


# @section Portal settings

# @param portal.replicaCount A replica count for the pod.
# @param portal.terminationGracePeriodSeconds Wait for up to this amount of seconds for a running instance of the service to shut down.
# @param portal.maxBodySize Maximum HTTP request body size.
# @param portal.gzip.enabled If GZip compression should be enabled for the HTTP requests and responses.

portal:
  replicaCount: 1
  terminationGracePeriodSeconds: 60
  maxBodySize: 100m
  gzip:
    enabled: true

  # @param portal.service.type Kubernetes [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
  # @param portal.service.port Service port.

  service:
    type: ClusterIP
    port: 80

  # @param portal.websocket.timeout WebSocket timeout in seconds.

  websocket:
    timeout: 604800

  image:
    repository: 2gis-on-premise/gis_platform_portal
    tag: 2022.9.29

  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 100m
      memory: 512Mi

  # @extra portal.cache **Cache settings**
  # @param portal.cache.enabled If caching should be enabled for the Portal service.
  # @param portal.cache.size Maximum cache size.
  # @param portal.cache.valid Cache vailidity period.
  # @param portal.cache.regex Array of regexes to match the resources that should be cached.

  cache:
    enabled: false
    size: 1G
    valid: 1m
    regex:
    - ^/sp/wms.*layers=admin.satellite_imagery&.*$
    - ^/sp/wms.*layers=admin.2gis&.*$

  # @extra portal.s3proxy **S3 storage proxy settings**
  # @param portal.s3proxy.enabled If S3 proxy should be enabled.
  # @param portal.s3proxy.scheme Protocol to use: `http` or `https`.

  s3proxy:
    enabled: false
    scheme: http


# @section ZooKeeper settings

# @param zookeeper.replicaCount A replica count for the pod.
# @param zookeeper.persistence.enabled If Kubernetes persistence volume should be enabled for ZooKeeper.
# @extra zookeeper.pdb **Kubernetes [pod disruption budget](https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets) settings**
# @param zookeeper.pdb.create If PDB is enabled for the service.
# @param zookeeper.pdb.maxUnavailable How many pods can be unavailable after the eviction.

zookeeper:
  replicaCount: 3

  persistence:
    enabled: false

  image:
    repository: 2gis-on-premise/zookeeper
    tag: 3.7.0-debian-10-r265

  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 200m
      memory: 512Mi

  pdb:
    create: true
    maxUnavailable: 1

# @section Limits

# @extra spcore.resources **Limits for the SPCore service**
# @param spcore.resources.requests.cpu A CPU request.
# @param spcore.resources.requests.memory A memory request.
# @param spcore.resources.limits.cpu A CPU limit.
# @param spcore.resources.limits.memory A memory limit.

# @extra portal.resources **Limits for the Portal service**
# @param portal.resources.requests.cpu A CPU request.
# @param portal.resources.requests.memory A memory request.
# @param portal.resources.limits.cpu A CPU limit.
# @param portal.resources.limits.memory A memory limit.

# @extra zookeeper.resources **Limits for the ZooKeeper service**
# @param zookeeper.resources.requests.cpu A CPU request.
# @param zookeeper.resources.requests.memory A memory request.
# @param zookeeper.resources.limits.cpu A CPU limit.
# @param zookeeper.resources.limits.memory A memory limit.
